// ARTBIDDO - Casa de Subastas Online
class AuctionHouse {
    constructor() {
        // Cargar datos existentes
        this.auctions = JSON.parse(localStorage.getItem('auctions')) || [];
        this.bids = JSON.parse(localStorage.getItem('bids')) || [];
        this.users = JSON.parse(localStorage.getItem('users')) || [];

        this.storeItems = JSON.parse(localStorage.getItem('storeItems')) || [];
        // Limpiar productos automáticos al inicializar
        this.clearAutoGeneratedStore();
        this.linkedItems = JSON.parse(localStorage.getItem('linkedItems')) || []; // Para vincular tienda y subastas

        this.transactions = JSON.parse(localStorage.getItem('transactions')) || [];
        this.currentId = this.auctions.length > 0 ? Math.max(...this.auctions.map(a => a.id)) + 1 : 1;
        this.bidId = this.bids.length > 0 ? Math.max(...this.bids.map(b => b.id)) + 1 : 1;
        this.userId = this.users.length > 0 ? Math.max(...this.users.map(u => u.id)) + 1 : 1;
        this.transactionId = this.transactions.length > 0 ? Math.max(...this.transactions.map(t => t.id)) + 1 : 1;
        this.isAdmin = false;
        this.currentUser = null;
        this.forcedWin = { active: false, botName: null, auctionId: null };
        
        // Sistema de bots
        this.bots = [
            { id: 1, name: 'ArteLover', tokens: 5000, aggressiveness: 0.7, active: true },
            { id: 2, name: 'CollectorPro', tokens: 8000, aggressiveness: 0.8, active: true },
            { id: 3, name: 'ArtInvestor', tokens: 12000, aggressiveness: 0.6, active: true },
            { id: 4, name: 'GalleryMaster', tokens: 15000, aggressiveness: 0.9, active: true },
            { id: 5, name: 'VintageHunter', tokens: 3000, aggressiveness: 0.5, active: true }
        ];
        this.botsEnabled = true;
        this.botActivity = 0;
        this.countdownTimers = new Map();
        this.countdownIntervals = new Map();
        
        this.createAdminUserIfNeeded();
        this.init();
        this.startBotActivity();
    }

    init() {
        this.setupEventListeners();
        this.loadSampleData();
        this.checkAuthStatus(); // Cargar usuario guardado primero
        this.updateStats();
        this.renderFeaturedAuctions();
        this.startTimer();
        // Verificar admin después de cargar usuario
        this.checkAdminStatus();
        this.updateAdminButtons();
        this.updateUserDisplay();
    }

    setupEventListeners() {
        // Navigation
        document.querySelectorAll('.nav-link').forEach(link => {
            link.addEventListener('click', (e) => {
                e.preventDefault();
                const page = e.target.dataset.page;
                this.showPage(page);
            });
        });

        // Auction form
        document.getElementById('auctionForm').addEventListener('submit', (e) => {
            e.preventDefault();
            this.createAuction();
        });

        // Auth forms
        document.getElementById('loginFormElement').addEventListener('submit', (e) => {
            e.preventDefault();
            this.login();
        });

        document.getElementById('registerFormElement').addEventListener('submit', (e) => {
            e.preventDefault();
            this.register();
        });

        // Bot edit form
        document.getElementById('botEditForm').addEventListener('submit', (e) => {
            e.preventDefault();
            saveBotEdit();
        });

        // User edit form
        document.getElementById('userEditForm').addEventListener('submit', (e) => {
            e.preventDefault();
            saveUserEdit();
        });

        // Gift tokens form
        document.getElementById('giftTokensForm').addEventListener('submit', (e) => {
            e.preventDefault();
            sendGiftTokens();
        });

        // Admin tabs
        document.querySelectorAll('.tab-button').forEach(button => {
            button.addEventListener('click', (e) => {
                const tabName = e.target.closest('.tab-button').dataset.tab;
                this.switchAdminTab(tabName);
            });
        });

        // Modal functionality
        const modals = document.querySelectorAll('.modal');
        const closeBtns = document.querySelectorAll('.close');
        
        closeBtns.forEach(btn => {
            btn.addEventListener('click', () => {
                modals.forEach(modal => modal.style.display = 'none');
            });
        });

        window.addEventListener('click', (e) => {
            modals.forEach(modal => {
                if (e.target === modal) {
                    modal.style.display = 'none';
                }
            });
        });
    }

    showPage(pageName) {
        // Verificar si necesita login para páginas protegidas
        const protectedPages = ['profile', 'my-bids', 'tokens', 'create', 'admin'];
        if (protectedPages.includes(pageName) && !this.currentUser) {
            this.showAuthModal();
            return;
        }

        // Update navigation
        document.querySelectorAll('.nav-link').forEach(link => {
            link.classList.remove('active');
        });
        document.querySelector(`[data-page="${pageName}"]`).classList.add('active');

        // Show page
        document.querySelectorAll('.page').forEach(page => {
            page.classList.remove('active');
        });
        document.getElementById(pageName).classList.add('active');

        // Load specific content
        switch(pageName) {
            case 'home':
                this.updateStats();
                this.renderFeaturedAuctions();
                break;
            case 'auctions':
                this.renderAuctions();
                this.checkMaintenanceStatus('auctions');
                break;
            case 'client-auctions':
                this.renderClientAuctions();
                this.checkMaintenanceStatus('client-auctions');
                break;
            case 'how-it-works':
                // Página estática, no necesita lógica especial
                break;
            case 'submit-artwork':
                this.setupArtworkSubmissionForm();
                break;

            case 'store':
                this.renderStore();
                break;

            case 'create':
                if (!this.isAdmin) {
                    this.showNotification('Solo los administradores pueden crear subastas', 'error');
                    this.showPage('home');
                    return;
                }
                break;
            case 'my-bids':
                this.renderMyBids();
                break;
            case 'tokens':
                this.renderTokensPage();
                break;
            case 'profile':
                this.updateProfileStats();
                break;
            case 'admin':
                if (!this.isAdmin) {
                    this.showNotification('Acceso denegado', 'error');
                    this.showPage('home');
                    return;
                }
                this.renderAdminPage();
                break;
            case 'store-manager':
                if (!this.isAdmin) {
                    this.showNotification('Acceso denegado', 'error');
                    this.showPage('home');
                    return;
                }
                this.renderStoreManager();
                break;
        }
    }

    createAuction() {
        const formData = new FormData(document.getElementById('auctionForm'));
        const auction = {
            id: this.currentId++,
            title: formData.get('itemTitle'),
            category: formData.get('category'),
            description: formData.get('itemDescription'),
            startingPrice: parseInt(formData.get('startingPrice')),
            reservePrice: formData.get('reservePrice') ? parseInt(formData.get('reservePrice')) : null,
            startDate: formData.get('startDate'),
            endDate: formData.get('endDate'),
            condition: formData.get('condition'),
            provenance: formData.get('provenance'),
            images: [],
            currentPrice: parseInt(formData.get('startingPrice')),
            bids: [],
            createdBy: this.currentUser.id,
            createdAt: new Date().toISOString()
        };

        // Handle image uploads
        const imageFiles = document.getElementById('itemImages').files;
        Array.from(imageFiles).forEach(file => {
            const reader = new FileReader();
            reader.onload = (e) => {
                auction.images.push(e.target.result);
            };
            reader.readAsDataURL(file);
        });

        this.auctions.push(auction);
        this.saveToLocalStorage();
        this.renderAuctions();
        this.showNotification('Subasta creada exitosamente', 'success');
        this.clearAuctionForm();
        this.showPage('auctions');
    }

    renderAuctions() {
        const auctionsGrid = document.getElementById('auctionsGrid');
        const filteredAuctions = this.getFilteredAuctions();

        if (filteredAuctions.length === 0) {
            auctionsGrid.innerHTML = `
                <div class="empty-state">
                    <i class="fas fa-gavel"></i>
                    <h3>No hay subastas disponibles</h3>
                    <p>No se encontraron subastas con los filtros actuales</p>
                </div>
            `;
            return;
        }

        auctionsGrid.innerHTML = filteredAuctions.map(auction => {
            const status = this.getAuctionStatus(auction);
            const timeLeft = this.getTimeLeft(auction.endDate);
            const bidCount = this.bids.filter(bid => bid.auctionId === auction.id).length;
            
            return `
                <div class="auction-card" onclick="showAuctionDetail(${auction.id})">
                    <div class="auction-card-image">
                        <img src="${auction.images[0] || 'https://via.placeholder.com/300x200?text=Sin+Imagen'}" alt="${auction.title}">
                        <div class="status ${status.class}">${status.text}</div>
                    </div>
                    <div class="auction-card-content">
                        <h3>${auction.title}</h3>
                        <div class="category">${auction.category}</div>
                        <div class="price">${auction.currentPrice} tokens</div>
                        <div class="time-left">${timeLeft}</div>
                        <div class="bids">${bidCount} pujas</div>
                    </div>
                </div>
            `;
        }).join('');
    }

    getFilteredAuctions() {
        const searchTerm = document.getElementById('searchAuctions').value.toLowerCase();
        const categoryFilter = document.getElementById('categoryFilter').value;
        const statusFilter = document.getElementById('statusFilter').value;

        return this.auctions.filter(auction => {
            const matchesSearch = auction.title.toLowerCase().includes(searchTerm) ||
                                auction.description.toLowerCase().includes(searchTerm);
            const matchesCategory = !categoryFilter || auction.category === categoryFilter;
            const matchesStatus = !statusFilter || this.getAuctionStatus(auction).class === statusFilter;
            
            // Solo mostrar subastas de ArtBiddo (admin)
            const isAdminAuction = auction.isAdminAuction !== false;
            
            return matchesSearch && matchesCategory && matchesStatus && isAdminAuction;
        });
    }

    renderClientAuctions() {
        const clientAuctionsGrid = document.getElementById('clientAuctionsGrid');
        const filteredClientAuctions = this.getFilteredClientAuctions();

        if (filteredClientAuctions.length === 0) {
            clientAuctionsGrid.innerHTML = `
                <div class="empty-state">
                    <i class="fas fa-users"></i>
                    <h3>No hay subastas de clientes disponibles</h3>
                    <p>No se encontraron subastas de clientes con los filtros actuales</p>
                </div>
            `;
            return;
        }

        clientAuctionsGrid.innerHTML = filteredClientAuctions.map(auction => {
            const status = this.getAuctionStatus(auction);
            const timeLeft = this.getTimeLeft(auction.endDate);
            const bidCount = this.bids.filter(bid => bid.auctionId === auction.id).length;
            
            return `
                <div class="auction-card" onclick="showAuctionDetail(${auction.id})">
                    <div class="auction-card-image">
                        <img src="${auction.images[0] || 'https://via.placeholder.com/300x200?text=Sin+Imagen'}" alt="${auction.title}">
                        <div class="status ${status.class}">${status.text}</div>
                        <div class="client-badge">Cliente</div>
                    </div>
                    <div class="auction-card-content">
                        <h3>${auction.title}</h3>
                        <div class="category">${auction.category}</div>
                        <div class="price">${auction.currentPrice} tokens</div>
                        <div class="time-left">${timeLeft}</div>
                        <div class="bids">${bidCount} pujas</div>
                    </div>
                </div>
            `;
        }).join('');
    }

    getFilteredClientAuctions() {
        const searchTerm = document.getElementById('searchClientAuctions').value.toLowerCase();
        const categoryFilter = document.getElementById('clientCategoryFilter').value;
        const statusFilter = document.getElementById('clientStatusFilter').value;

        return this.auctions.filter(auction => {
            const matchesSearch = auction.title.toLowerCase().includes(searchTerm) ||
                                auction.description.toLowerCase().includes(searchTerm);
            const matchesCategory = !categoryFilter || auction.category === categoryFilter;
            const matchesStatus = !statusFilter || this.getAuctionStatus(auction).class === statusFilter;
            
            // Solo mostrar subastas de clientes (no admin)
            const isClientAuction = auction.isAdminAuction === false;
            
            return matchesSearch && matchesCategory && matchesStatus && isClientAuction;
        });
    }

    checkMaintenanceStatus(pageType) {
        let auctionsToCheck = [];
        let noticeId = '';
        
        if (pageType === 'auctions') {
            auctionsToCheck = this.getFilteredAuctions();
            noticeId = 'maintenanceNoticeAuctions';
        } else if (pageType === 'client-auctions') {
            auctionsToCheck = this.getFilteredClientAuctions();
            noticeId = 'maintenanceNoticeClients';
        }

        const maintenanceNotice = document.getElementById(noticeId);
        if (!maintenanceNotice) return;

        if (auctionsToCheck.length === 0) {
            maintenanceNotice.style.display = 'block';
        } else {
            maintenanceNotice.style.display = 'none';
        }
    }

    getTimeLeft(endDate) {
        const now = new Date();
        const end = new Date(endDate);
        const diff = end - now;

        if (diff <= 0) return 'Finalizada';

        const days = Math.floor(diff / (1000 * 60 * 60 * 24));
        const hours = Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
        const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));

        if (days > 0) return `${days}d ${hours}h`;
        if (hours > 0) return `${hours}h ${minutes}m`;
        return `${minutes}m`;
    }

    getAuctionStatus(auction) {
        const now = new Date();
        const endDate = new Date(auction.endDate);
        const timeLeft = endDate - now;

        if (timeLeft <= 0) {
            return { text: 'Finalizada', class: 'ended' };
        } else if (timeLeft <= 60000) { // 1 minuto
            return { text: 'Terminando', class: 'ending-soon' };
        } else {
            return { text: 'Activa', class: 'active' };
        }
    }

    showAuctionDetail(id) {
        const auction = this.auctions.find(a => a.id === id);
        if (!auction) return;

        const modalContent = document.getElementById('modalContent');
        const status = this.getAuctionStatus(auction);
        const timeLeft = this.getTimeLeft(auction.endDate);
        const bidCount = this.bids.filter(bid => bid.auctionId === auction.id).length;

        modalContent.innerHTML = `
            <div class="auction-detail">
                <div class="auction-images">
                    ${auction.images.map(img => `<img src="${img}" alt="${auction.title}">`).join('')}
                </div>
                <div class="auction-info">
                    <h2>${auction.title}</h2>
                    <div class="auction-meta">
                        <span class="category">${auction.category}</span>
                        <span class="status ${status.class}">${status.text}</span>
                        <span class="time-left">${timeLeft}</span>
                    </div>
                    <div class="auction-description">
                        <p>${auction.description}</p>
                    </div>
                    <div class="auction-details">
                        <div class="detail">
                            <label>Precio Actual:</label>
                            <span class="price">${auction.currentPrice} tokens</span>
                        </div>
                        <div class="detail">
                            <label>Precio Inicial:</label>
                            <span>${auction.startingPrice} tokens</span>
                        </div>
                        <div class="detail">
                            <label>Pujas:</label>
                            <span>${bidCount}</span>
                        </div>
                        ${auction.condition ? `<div class="detail"><label>Estado:</label><span>${auction.condition}</span></div>` : ''}
                        ${auction.provenance ? `<div class="detail"><label>Procedencia:</label><span>${auction.provenance}</span></div>` : ''}
                    </div>
                    <div class="auction-actions">
                        <button class="btn btn-primary" onclick="showBidModal(${auction.id})">
                            <i class="fas fa-hand-paper"></i> Pujar
                        </button>
                        <button class="btn btn-secondary" onclick="showAuctionBids(${auction.id})">
                            <i class="fas fa-history"></i> Ver Pujas
                        </button>
                    </div>
                </div>
            </div>
        `;

        document.getElementById('auctionModal').style.display = 'block';
    }

    showBidModal(auctionId) {
        const auction = this.auctions.find(a => a.id === auctionId);
        if (!auction) return;

        if (!this.currentUser) {
            this.showNotification('Debes iniciar sesión para pujar', 'error');
            return;
        }

        const currentBids = this.bids.filter(bid => bid.auctionId === auctionId);
        const currentPrice = currentBids.length > 0 ? Math.max(...currentBids.map(bid => bid.amount)) : auction.startingPrice;
        const minBid = currentPrice + 1;

        const bidModalContent = document.getElementById('bidModalContent');
        bidModalContent.innerHTML = `
            <div class="bid-form">
                <h3>Pujar en "${auction.title}"</h3>
                <div class="current-price">
                    Precio actual: ${currentPrice} tokens
                </div>
                <form id="bidForm">
                    <input type="number" id="bidAmount" class="bid-input" 
                           min="${minBid}" value="${minBid}" required>
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-hand-paper"></i> Pujar
                    </button>
                </form>
            </div>
        `;

        document.getElementById('bidModal').style.display = 'block';

        // Add event listener for bid form
        document.getElementById('bidForm').addEventListener('submit', (e) => {
            e.preventDefault();
            this.placeBid(auctionId);
        });
    }

    placeBid(auctionId) {
        const auction = this.auctions.find(a => a.id === auctionId);
        if (!auction) return;

        const bidAmount = parseInt(document.getElementById('bidAmount').value);
        const currentBids = this.bids.filter(bid => bid.auctionId === auctionId);
        const currentPrice = currentBids.length > 0 ? Math.max(...currentBids.map(bid => bid.amount)) : auction.startingPrice;

        if (bidAmount <= currentPrice) {
            this.showNotification('La puja debe ser mayor al precio actual', 'error');
            return;
        }

        if (this.currentUser.tokens < bidAmount) {
            this.showNotification('No tienes suficientes tokens', 'error');
            return;
        }

        const bid = {
            id: this.bidId++,
            auctionId: auctionId,
            userId: this.currentUser.id,
            bidderName: this.currentUser.name,
            amount: bidAmount,
            timestamp: new Date().toISOString(),
            isBot: false
        };

        this.bids.push(bid);
        this.currentUser.tokens -= bidAmount;
        auction.currentPrice = bidAmount;
        
        this.saveToLocalStorage();
        this.updateUserDisplay();
        this.renderAuctions();
        this.updateStats();
        
        document.getElementById('bidModal').style.display = 'none';
        this.showNotification(`Puja exitosa: ${bidAmount} tokens`, 'success');
        
        // Start countdown
        this.startCountdown(auctionId, this.currentUser.name);
        
        // Trigger bot response
        setTimeout(() => {
            this.triggerBotResponse(auctionId);
        }, Math.random() * 3000 + 2000);
    }

    startBotActivity() {
        setInterval(() => {
            this.botBidding();
        }, Math.random() * 15000 + 15000);
    }

    botBidding() {
        if (!this.botsEnabled) return;

        const activeAuctions = this.auctions.filter(auction => {
            const now = new Date();
            const endDate = new Date(auction.endDate);
            return endDate > now;
        });

        if (activeAuctions.length === 0) return;

        const randomAuction = activeAuctions[Math.floor(Math.random() * activeAuctions.length)];
        const availableBots = this.bots.filter(bot => bot.active && bot.tokens > 0);

        if (availableBots.length === 0) return;

        const selectedBot = availableBots[Math.floor(Math.random() * availableBots.length)];
        const currentBids = this.bids.filter(bid => bid.auctionId === randomAuction.id);
        const currentPrice = currentBids.length > 0 ? Math.max(...currentBids.map(bid => bid.amount)) : randomAuction.startingPrice;

        const bidIncrement = Math.floor(Math.random() * 4) + 2;
        const newBidAmount = currentPrice + bidIncrement;

        if (selectedBot.tokens >= newBidAmount) {
            const bid = {
                id: this.bidId++,
                auctionId: randomAuction.id,
                userId: null,
                botId: selectedBot.id,
                bidderName: selectedBot.name,
                amount: newBidAmount,
                timestamp: new Date().toISOString(),
                isBot: true
            };

            this.bids.push(bid);
            selectedBot.tokens -= newBidAmount;
            this.botActivity++;
            this.saveToLocalStorage();
            this.updateBotStats();
            this.showNotification(`${selectedBot.name} pujó ${newBidAmount} tokens`, 'info');
        }
    }

    triggerBotResponse(auctionId) {
        if (!this.botsEnabled) return;

        setTimeout(() => {
            const auction = this.auctions.find(a => a.id === auctionId);
            if (!auction) return;

            const currentBids = this.bids.filter(bid => bid.auctionId === auctionId);
            if (currentBids.length === 0) return;

            const lastBid = currentBids[currentBids.length - 1];
            
            if (lastBid.isBot) return;

            const availableBots = this.bots.filter(bot => bot.active && bot.tokens > 0);
            if (availableBots.length === 0) return;

            const selectedBot = availableBots[Math.floor(Math.random() * availableBots.length)];
            const currentPrice = lastBid.amount;
            
            const bidIncrement = Math.floor(Math.random() * 6) + 3;
            const newBidAmount = currentPrice + bidIncrement;

            if (selectedBot.tokens >= newBidAmount) {
                const bid = {
                    id: this.bidId++,
                    auctionId: auctionId,
                    userId: null,
                    botId: selectedBot.id,
                    bidderName: selectedBot.name,
                    amount: newBidAmount,
                    timestamp: new Date().toISOString(),
                    isBot: true
                };

                this.bids.push(bid);
                selectedBot.tokens -= newBidAmount;
                this.botActivity++;
                this.saveToLocalStorage();
                this.updateBotStats();
                this.showNotification(`${selectedBot.name} respondió con ${newBidAmount} tokens`, 'info');
                
                this.startCountdown(auctionId, selectedBot.name);
            }
        }, Math.random() * 3000 + 2000);
    }

    startCountdown(auctionId, bidderName) {
        this.stopCountdown(auctionId);
        
        let seconds = 10;
        document.getElementById('lastBidderName').textContent = bidderName;
        document.getElementById('countdownSeconds').textContent = seconds;
        document.getElementById('countdownModal').style.display = 'block';
        
        const interval = setInterval(() => {
            seconds--;
            document.getElementById('countdownSeconds').textContent = seconds;
            
            if (seconds <= 0) {
                clearInterval(interval);
                this.autoBotBid(auctionId);
            }
        }, 1000);
        
        this.countdownIntervals.set(auctionId, interval);
    }

    stopCountdown(auctionId) {
        const interval = this.countdownIntervals.get(auctionId);
        if (interval) {
            clearInterval(interval);
            this.countdownIntervals.delete(auctionId);
        }
    }

    autoBotBid(auctionId) {
        const availableBots = this.bots.filter(bot => bot.active && bot.tokens > 0);
        if (availableBots.length === 0) return;

        const selectedBot = availableBots[Math.floor(Math.random() * availableBots.length)];
        const currentBids = this.bids.filter(bid => bid.auctionId === auctionId);
        const currentPrice = currentBids.length > 0 ? Math.max(...currentBids.map(bid => bid.amount)) : 0;

        const bidIncrement = Math.floor(Math.random() * 3) + 1;
        const newBidAmount = currentPrice + bidIncrement;

        if (selectedBot.tokens >= newBidAmount) {
            const bid = {
                id: this.bidId++,
                auctionId: auctionId,
                userId: null,
                botId: selectedBot.id,
                bidderName: selectedBot.name,
                amount: newBidAmount,
                timestamp: new Date().toISOString(),
                isBot: true
            };

            this.bids.push(bid);
            selectedBot.tokens -= newBidAmount;
            this.botActivity++;
            this.saveToLocalStorage();
            this.updateBotStats();
            this.showNotification(`${selectedBot.name} pujó automáticamente ${newBidAmount} tokens`, 'info');
            
            this.startCountdown(auctionId, selectedBot.name);
        }
    }

    // ... (resto de métodos)

    saveToLocalStorage() {
        localStorage.setItem('auctions', JSON.stringify(this.auctions));
        localStorage.setItem('bids', JSON.stringify(this.bids));
        localStorage.setItem('users', JSON.stringify(this.users));
        localStorage.setItem('transactions', JSON.stringify(this.transactions));
    }

    showNotification(message, type = 'info') {
        const notification = document.createElement('div');
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 20px;
            border-radius: 10px;
            color: white;
            font-weight: 500;
            z-index: 10000;
            transform: translateX(100%);
            transition: transform 0.3s ease;
            background: ${type === 'success' ? '#28a745' : type === 'error' ? '#dc3545' : '#007bff'};
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
        `;
        notification.textContent = message;
        
        document.body.appendChild(notification);
        
        setTimeout(() => {
            notification.style.transform = 'translateX(0)';
        }, 100);
        
        setTimeout(() => {
            notification.style.transform = 'translateX(100%)';
            setTimeout(() => {
                document.body.removeChild(notification);
            }, 300);
        }, 3000);
    }

    loadSampleData() {
        localStorage.removeItem('auctions');
        localStorage.removeItem('bids');
        localStorage.removeItem('transactions');
        
        this.auctions = [];
        this.bids = [];
        this.transactions = [];
        this.currentId = 1;
        this.bidId = 1;
        this.transactionId = 1;
        
        this.saveToLocalStorage();
        this.renderAuctions();
        this.updateStats();
        this.renderFeaturedAuctions();
    }

    createAdminUserIfNeeded() {
        // Crear usuario admin automáticamente si no existe
        const adminExists = this.users.find(u => u.email === 'admin@artbiddo.com' || u.email === 'codevendi@gmail.com');
        if (!adminExists) {
            const adminUser = {
                id: this.userId++,
                name: 'Administrador ArtBiddo',
                email: 'admin@artbiddo.com',
                password: 'admin123',
                tokens: 50000,
                isAdmin: true,
                joinedDate: new Date().toISOString(),
                bids: [],
                wins: 0,
                cardInfo: {
                    number: '4532123456789012',
                    holder: 'Administrador ArtBiddo',
                    expiry: '12/28',
                    cvv: '123',
                    type: 'Visa'
                }
            };
            this.users.push(adminUser);
            this.saveToLocalStorage();
        }
    }

    // Métodos de autenticación
    checkAuthStatus() {
        const savedUser = localStorage.getItem('currentUser');
        if (savedUser) {
            this.currentUser = JSON.parse(savedUser);
            this.updateUserDisplay();
        }
    }

    showAuthModal() {
        document.getElementById('authModal').style.display = 'block';
        this.showLoginForm();
    }

    showLoginForm() {
        document.getElementById('loginForm').style.display = 'block';
        document.getElementById('registerForm').style.display = 'none';
    }

    showRegisterForm() {
        document.getElementById('loginForm').style.display = 'none';
        document.getElementById('registerForm').style.display = 'block';
    }

    login() {
        const email = document.getElementById('loginEmail').value.trim();
        const password = document.getElementById('loginPassword').value;

        if (!email || !password) {
            this.showNotification('Por favor, completa todos los campos', 'error');
            return;
        }

        const user = this.users.find(u => u.email.toLowerCase() === email.toLowerCase() && u.password === password);
        
        if (user) {
            this.currentUser = user;
            localStorage.setItem('currentUser', JSON.stringify(user));
            document.getElementById('authModal').style.display = 'none';
            document.getElementById('loginFormElement').reset();
            this.updateUserDisplay();
            this.checkAdminStatus(); // Verificar admin inmediatamente después del login
            this.showNotification('Sesión iniciada correctamente', 'success');
        } else {
            this.showNotification('Email o contraseña incorrectos', 'error');
        }
    }

    register() {
        const name = document.getElementById('registerName').value.trim();
        const email = document.getElementById('registerEmail').value.trim();
        const password = document.getElementById('registerPassword').value;
        const confirmPassword = document.getElementById('registerConfirmPassword').value;

        if (!name || !email || !password || !confirmPassword) {
            this.showNotification('Por favor, completa todos los campos', 'error');
            return;
        }

        if (password.length < 6) {
            this.showNotification('La contraseña debe tener al menos 6 caracteres', 'error');
            return;
        }

        if (password !== confirmPassword) {
            this.showNotification('Las contraseñas no coinciden', 'error');
            return;
        }

        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(email)) {
            this.showNotification('Por favor, introduce un email válido', 'error');
            return;
        }

        const existingUser = this.users.find(u => u.email.toLowerCase() === email.toLowerCase());
        if (existingUser) {
            this.showNotification('Ya existe un usuario con este email', 'error');
            return;
        }

        const user = {
            id: this.userId++,
            name: name,
            email: email.toLowerCase(),
            password: password,
            tokens: 0,
            createdAt: new Date().toISOString()
        };

        this.users.push(user);
        this.currentUser = user;
        localStorage.setItem('currentUser', JSON.stringify(user));
        this.saveToLocalStorage();
        
        document.getElementById('registerFormElement').reset();
        document.getElementById('authModal').style.display = 'none';
        this.updateUserDisplay();
        this.checkAdminStatus(); // Verificar admin después del registro
        this.showNotification('Usuario registrado correctamente', 'success');
    }

    logout() {
        this.currentUser = null;
        localStorage.removeItem('currentUser');
        this.updateUserDisplay();
        this.updateAdminButtons();
        this.showNotification('Sesión cerrada', 'info');
        this.showPage('home');
    }

    updateUserDisplay() {
        const loginBtn = document.querySelector('.user-actions .btn');
        const tokensDisplay = document.querySelector('.tokens-display');
        
        // Elementos de navegación que requieren login
        const protectedNavLinks = document.querySelectorAll('.protected-nav');
        
        if (this.currentUser) {
            loginBtn.style.display = 'none';
            tokensDisplay.style.display = 'flex';
            document.getElementById('userTokens').textContent = this.currentUser.tokens;
            document.getElementById('userName').textContent = this.currentUser.name;
            document.getElementById('userEmail').textContent = this.currentUser.email;
            
            // Mostrar navegación protegida
            protectedNavLinks.forEach(link => {
                link.style.display = 'block';
            });
            
            // Verificar y actualizar estado admin después del login
            this.checkAdminStatus();
            
            this.updateProfileStats();
        } else {
            loginBtn.style.display = 'inline-flex';
            tokensDisplay.style.display = 'none';
            document.getElementById('userName').textContent = 'Usuario';
            document.getElementById('userEmail').textContent = 'No has iniciado sesión';
            
            // Ocultar navegación protegida completamente
            protectedNavLinks.forEach(link => {
                link.style.display = 'none';
            });
            
            // Limpiar estadísticas del perfil
            document.getElementById('userBids').textContent = '0';
            document.getElementById('userWins').textContent = '0';
            document.getElementById('userTokensDisplay').textContent = '0';
            // Estadística eliminada: userAuctions
        }
    }

    // Métodos de administración
    checkAdminStatus() {
        // Verificar si el usuario actual es admin basado en su email
        if (this.currentUser && (this.currentUser.email === 'admin@artbiddo.com' || this.currentUser.email === 'codevendi@gmail.com' || this.currentUser.isAdmin)) {
            this.isAdmin = true;
            localStorage.setItem('isAdmin', 'true');
        } else {
            this.isAdmin = false;
            localStorage.setItem('isAdmin', 'false');
        }
        
        // Actualizar elementos admin inmediatamente
        this.updateAdminButtons();
    }

    canBeAdmin() {
        if (!this.currentUser) return false;
        return this.currentUser.email.toLowerCase() === 'codevendi@gmail.com';
    }

    enableAdminMode() {
        if (!this.canBeAdmin()) {
            this.showNotification('No tienes permisos para activar el modo administrador', 'error');
            return;
        }
        
        this.isAdmin = true;
        localStorage.setItem('isAdmin', 'true');
        this.checkAdminStatus();
        this.updateAdminButtons();
        this.showNotification('Modo administrador activado', 'success');
    }

    disableAdminMode() {
        this.isAdmin = false;
        localStorage.removeItem('isAdmin');
        this.checkAdminStatus();
        this.updateAdminButtons();
        this.showNotification('Modo administrador desactivado', 'info');
    }

    updateAdminButtons() {
        const adminElements = document.querySelectorAll('.admin-only');
        
        if (this.isAdmin && this.currentUser) {
            adminElements.forEach(el => {
                el.style.display = 'block';
            });
        } else {
            adminElements.forEach(el => {
                el.style.display = 'none';
            });
        }
        
        const enableBtn = document.getElementById('enableAdminBtn');
        const disableBtn = document.getElementById('disableAdminBtn');
        
        // Si no hay usuario logueado, ocultar todo
        if (!this.currentUser) {
            enableBtn.style.display = 'none';
            disableBtn.style.display = 'none';
            return;
        }
        
        if (this.isAdmin) {
            enableBtn.style.display = 'none';
            disableBtn.style.display = 'inline-flex';
        } else {
            if (this.canBeAdmin()) {
                enableBtn.style.display = 'inline-flex';
            } else {
                enableBtn.style.display = 'none';
            }
            disableBtn.style.display = 'none';
        }
    }

    // Métodos de estadísticas
    updateStats() {
        const activeAuctions = this.auctions.filter(auction => {
            const now = new Date();
            const endDate = new Date(auction.endDate);
            return endDate > now;
        }).length;

        const totalBids = this.bids.length;
        const totalValue = this.auctions.reduce((sum, auction) => sum + auction.currentPrice, 0);
        const activeUsers = this.users.length;

        // Estadísticas legacy (hero section original)
        const activeAuctionsEl = document.getElementById('activeAuctions');
        const totalBidsEl = document.getElementById('totalBids');
        const totalValueEl = document.getElementById('totalValue');
        const activeUsersEl = document.getElementById('activeUsers');

        if (activeAuctionsEl) activeAuctionsEl.textContent = activeAuctions;
        if (totalBidsEl) totalBidsEl.textContent = totalBids;
        if (totalValueEl) totalValueEl.textContent = `${totalValue} tokens`;
        if (activeUsersEl) activeUsersEl.textContent = activeUsers;

        // Estadísticas profesionales en tiempo real
        this.updateRealTimeStats();
    }

    // 🔥 NUEVAS ESTADÍSTICAS EN TIEMPO REAL
    updateRealTimeStats() {
        const now = new Date();
        const activeAuctions = this.auctions.filter(auction => {
            const endDate = new Date(auction.endDate);
            return endDate > now;
        }).length;

        // Simular usuarios activos en tiempo real (entre 15-50)
        const baseActiveUsers = this.users.length;
        const randomActiveUsers = Math.floor(Math.random() * 35) + 15;
        const activeUsersNow = baseActiveUsers + randomActiveUsers;

        // Pujas totales hoy (simuladas basadas en datos reales + actividad del día)
        const today = new Date().toDateString();
        const todayBids = this.bids.filter(bid => {
            const bidDate = new Date(bid.timestamp).toDateString();
            return bidDate === today;
        }).length;
        const simulatedTodayBids = todayBids + Math.floor(Math.random() * 50) + 20;

        // Actualizar elementos del hero profesional
        const activeUsersNowEl = document.getElementById('activeUsersNow');
        const activeAuctionsNowEl = document.getElementById('activeAuctionsNow');
        const totalBidsTodayEl = document.getElementById('totalBidsToday');

        if (activeUsersNowEl) {
            this.animateNumber(activeUsersNowEl, activeUsersNow);
        }
        if (activeAuctionsNowEl) {
            this.animateNumber(activeAuctionsNowEl, activeAuctions);
        }
        if (totalBidsTodayEl) {
            this.animateNumber(totalBidsTodayEl, simulatedTodayBids);
        }
    }

    // Animación de números para las estadísticas
    animateNumber(element, targetNumber) {
        const currentNumber = parseInt(element.textContent) || 0;
        const increment = (targetNumber - currentNumber) / 10;
        
        let current = currentNumber;
        const timer = setInterval(() => {
            current += increment;
            if ((increment > 0 && current >= targetNumber) || (increment < 0 && current <= targetNumber)) {
                element.textContent = targetNumber;
                clearInterval(timer);
            } else {
                element.textContent = Math.floor(current);
            }
        }, 50);
    }

    updateProfileStats() {
        if (!this.currentUser) return;

        const userBids = this.bids.filter(bid => bid.userId === this.currentUser.id).length;
        const userWins = this.auctions.filter(auction => {
            const auctionBids = this.bids.filter(bid => bid.auctionId === auction.id);
            if (auctionBids.length === 0) return false;
            const lastBid = auctionBids[auctionBids.length - 1];
            return lastBid.userId === this.currentUser.id;
        }).length;

        // Los usuarios ya no pueden crear subastas directamente

        document.getElementById('userBids').textContent = userBids;
        document.getElementById('userWins').textContent = userWins;
        document.getElementById('userTokensDisplay').textContent = this.currentUser.tokens;
        document.getElementById('userAuctions').textContent = '0';
    }

    renderFeaturedAuctions() {
        // Legacy container support
        const featuredContainer = document.getElementById('featuredAuctions');
        
        // Professional container (new homepage)
        const featuredContainerPro = document.getElementById('featuredAuctionsPro');
        
        const activeAuctions = this.auctions.filter(auction => {
            const now = new Date();
            const endDate = new Date(auction.endDate);
            return endDate > now;
        });

        // Seleccionar las 6 mejores subastas para la versión profesional
        const topAuctions = activeAuctions
            .sort((a, b) => {
                const bidsA = this.bids.filter(bid => bid.auctionId === a.id).length;
                const bidsB = this.bids.filter(bid => bid.auctionId === b.id).length;
                return bidsB - bidsA; // Ordenar por más pujas primero
            })
            .slice(0, 6);

        // Renderizar versión legacy si existe
        if (featuredContainer) {
            this.renderFeaturedLegacy(featuredContainer, activeAuctions.slice(0, 3));
        }

        // Renderizar versión profesional
        if (featuredContainerPro) {
            this.renderFeaturedProfessional(featuredContainerPro, topAuctions);
        }
    }

    // 🎨 RENDERIZADO PROFESIONAL DE SUBASTAS DESTACADAS
    renderFeaturedProfessional(container, auctions) {
        if (auctions.length === 0) {
            container.innerHTML = `
                <div class="empty-state" style="grid-column: 1 / -1; text-align: center; padding: 4rem;">
                    <i class="fas fa-palette" style="font-size: 4rem; color: #bdc3c7; margin-bottom: 1rem;"></i>
                    <h3 style="color: #7f8c8d; margin-bottom: 1rem;">Próximamente nuevas obras</h3>
                    <p style="color: #95a5a6;">Estamos preparando subastas exclusivas para ti</p>
                </div>
            `;
            return;
        }

        container.innerHTML = auctions.map(auction => {
            const timeLeft = this.getTimeLeft(auction.endDate);
            const bidCount = this.bids.filter(bid => bid.auctionId === auction.id).length;
            const badges = this.getAuctionBadges(auction, bidCount);
            const timeLeftData = this.getTimeLeftData(auction.endDate);
            
            return `
                <div class="featured-auction-card" onclick="showAuctionDetail(${auction.id})">
                    <div class="featured-auction-image">
                        <img src="${auction.images[0] || 'https://via.placeholder.com/400x250/667eea/ffffff?text=ArtBiddo'}" alt="${auction.title}">
                        <div class="auction-badges">
                            ${badges.map(badge => `<span class="auction-badge ${badge.class}">${badge.text}</span>`).join('')}
                        </div>
                    </div>
                    <div class="featured-auction-content">
                        <h4 class="featured-auction-title">${auction.title}</h4>
                        <p class="featured-auction-artist">por ${auction.artist || 'Artista Anónimo'}</p>
                        
                        <div class="featured-auction-meta">
                            <span class="featured-auction-price">${auction.currentPrice} tokens</span>
                            <span class="featured-auction-bids">${bidCount} pujas</span>
                        </div>
                        
                        <div class="featured-auction-timer">
                            <i class="fas fa-clock"></i> ${timeLeft}
                        </div>
                        
                        <div class="featured-auction-actions">
                            <button class="btn-featured primary" onclick="event.stopPropagation(); showAuctionDetail(${auction.id})">
                                <i class="fas fa-eye"></i> Ver Detalles
                            </button>
                        </div>
                    </div>
                </div>
            `;
        }).join('');
    }

    // Versión legacy para compatibilidad
    renderFeaturedLegacy(container, auctions) {
        if (auctions.length === 0) {
            container.innerHTML = `
                <div class="empty-state">
                    <i class="fas fa-gavel"></i>
                    <h3>No hay subastas activas</h3>
                    <p>¡Sé el primero en crear una subasta!</p>
                </div>
            `;
            return;
        }

        container.innerHTML = auctions.map(auction => {
            const status = this.getAuctionStatus(auction);
            const timeLeft = this.getTimeLeft(auction.endDate);
            const bidCount = this.bids.filter(bid => bid.auctionId === auction.id).length;
            
            return `
                <div class="auction-card" onclick="showAuctionDetail(${auction.id})">
                    <div class="auction-card-image">
                        <img src="${auction.images[0] || 'https://via.placeholder.com/300x200?text=Sin+Imagen'}" alt="${auction.title}">
                        <div class="status ${status.class}">${status.text}</div>
                    </div>
                    <div class="auction-card-content">
                        <h3>${auction.title}</h3>
                        <div class="category">${auction.category}</div>
                        <div class="price">${auction.currentPrice} tokens</div>
                        <div class="time-left">${timeLeft}</div>
                        <div class="bids">${bidCount} pujas</div>
                    </div>
                </div>
            `;
        }).join('');
    }

    // 🏷️ SISTEMA DE BADGES PARA SUBASTAS
    getAuctionBadges(auction, bidCount) {
        const badges = [];
        const now = new Date();
        const endDate = new Date(auction.endDate);
        const timeLeft = endDate - now;
        const hoursLeft = timeLeft / (1000 * 60 * 60);
        const daysFromCreation = (now - new Date(auction.createdAt)) / (1000 * 60 * 60 * 24);

        // Badge "Nuevo" - menos de 24 horas desde creación
        if (daysFromCreation < 1) {
            badges.push({ class: 'new', text: 'Nuevo' });
        }

        // Badge "Terminando Pronto" - menos de 6 horas
        if (hoursLeft < 6 && hoursLeft > 0) {
            badges.push({ class: 'ending-soon', text: 'Última Hora' });
        }

        // Badge "Popular" - más de 10 pujas
        if (bidCount > 10) {
            badges.push({ class: 'popular', text: 'Popular' });
        }

        // Badge por defecto si no hay otros
        if (badges.length === 0) {
            badges.push({ class: '', text: auction.category });
        }

        return badges.slice(0, 2); // Máximo 2 badges
    }

    // Obtener datos detallados de tiempo restante
    getTimeLeftData(endDate) {
        const now = new Date();
        const end = new Date(endDate);
        const diff = end - now;

        if (diff <= 0) {
            return { expired: true, text: 'Finalizada' };
        }

        const days = Math.floor(diff / (1000 * 60 * 60 * 24));
        const hours = Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
        const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));

        return {
            expired: false,
            days,
            hours,
            minutes,
            text: days > 0 ? `${days}d ${hours}h` : `${hours}h ${minutes}m`
        };
    }

    // 🔍 BUSCADOR INTELIGENTE DE LA PÁGINA DE INICIO
    performHomeSearch() {
        const searchTerm = document.getElementById('homeSearch').value.trim().toLowerCase();
        const category = document.getElementById('homeCategory').value;
        const priceRange = document.getElementById('homePriceRange').value;
        const timeFilter = document.getElementById('homeTimeFilter').value;

        // Si no hay término de búsqueda, mostrar todas las subastas
        if (!searchTerm && !category && !priceRange && !timeFilter) {
            this.showPage('auctions');
            return;
        }

        // Filtrar subastas según criterios
        let filteredAuctions = this.auctions.filter(auction => {
            const now = new Date();
            const endDate = new Date(auction.endDate);
            const isActive = endDate > now;
            
            if (!isActive) return false;

            // Filtro por texto (título, artista, descripción)
            if (searchTerm && !(
                auction.title.toLowerCase().includes(searchTerm) ||
                (auction.artist && auction.artist.toLowerCase().includes(searchTerm)) ||
                (auction.description && auction.description.toLowerCase().includes(searchTerm)) ||
                auction.category.toLowerCase().includes(searchTerm)
            )) {
                return false;
            }

            // Filtro por categoría
            if (category && auction.category !== category) {
                return false;
            }

            // Filtro por rango de precio
            if (priceRange) {
                const price = auction.currentPrice;
                switch (priceRange) {
                    case '0-50':
                        if (price > 50) return false;
                        break;
                    case '50-200':
                        if (price < 50 || price > 200) return false;
                        break;
                    case '200-500':
                        if (price < 200 || price > 500) return false;
                        break;
                    case '500+':
                        if (price < 500) return false;
                        break;
                }
            }

            // Filtro por tiempo
            if (timeFilter) {
                const timeLeft = endDate - now;
                const hoursLeft = timeLeft / (1000 * 60 * 60);
                const bidCount = this.bids.filter(bid => bid.auctionId === auction.id).length;
                const daysFromCreation = (now - new Date(auction.createdAt)) / (1000 * 60 * 60 * 24);

                switch (timeFilter) {
                    case 'ending-soon':
                        if (hoursLeft > 6) return false;
                        break;
                    case 'new':
                        if (daysFromCreation > 1) return false;
                        break;
                    case 'popular':
                        if (bidCount < 5) return false;
                        break;
                }
            }

            return true;
        });

        // Navegar a la página de subastas y aplicar filtros
        this.showPage('auctions');
        
        // Aplicar filtros a la página de subastas después de un breve delay
        setTimeout(() => {
            this.applyHomeSearchFilters(searchTerm, category, priceRange, timeFilter, filteredAuctions);
        }, 100);
    }

    // Aplicar filtros de búsqueda desde inicio en la página de subastas
    applyHomeSearchFilters(searchTerm, category, priceRange, timeFilter, filteredAuctions) {
        // Actualizar controles de filtro en la página de subastas
        const searchInput = document.getElementById('searchAuctions');
        const categoryFilter = document.getElementById('categoryFilter');
        
        if (searchInput) searchInput.value = searchTerm;
        if (categoryFilter) categoryFilter.value = category;

        // Mostrar resultados filtrados
        this.displayFilteredAuctions(filteredAuctions);
        
        // Mostrar mensaje de resultados
        this.showSearchResults(filteredAuctions.length, searchTerm);
    }

    // Mostrar resultados de búsqueda
    showSearchResults(count, searchTerm) {
        const container = document.querySelector('#auctions .container');
        const existingMessage = container.querySelector('.search-results-message');
        
        if (existingMessage) {
            existingMessage.remove();
        }

        if (searchTerm) {
            const message = document.createElement('div');
            message.className = 'search-results-message';
            message.style.cssText = `
                background: linear-gradient(135deg, #3498db, #2980b9);
                color: white;
                padding: 1rem 2rem;
                border-radius: 10px;
                margin-bottom: 2rem;
                text-align: center;
                box-shadow: 0 4px 15px rgba(52, 152, 219, 0.3);
            `;
            message.innerHTML = `
                <i class="fas fa-search"></i>
                <strong>${count}</strong> resultado${count !== 1 ? 's' : ''} encontrado${count !== 1 ? 's' : ''} 
                ${searchTerm ? `para "<em>${searchTerm}</em>"` : ''}
                <button onclick="this.parentElement.remove()" style="
                    background: none;
                    border: none;
                    color: white;
                    margin-left: 1rem;
                    cursor: pointer;
                    font-size: 1.2rem;
                ">×</button>
            `;
            
            const pageHeader = container.querySelector('.page-header');
            if (pageHeader) {
                pageHeader.after(message);
            }
        }
    }

    // Mostrar subastas filtradas
    displayFilteredAuctions(filteredAuctions) {
        const auctionsGrid = document.querySelector('#auctions .auctions-grid');
        if (!auctionsGrid) return;

        if (filteredAuctions.length === 0) {
            auctionsGrid.innerHTML = `
                <div class="empty-state" style="grid-column: 1 / -1; text-align: center; padding: 4rem;">
                    <i class="fas fa-search" style="font-size: 4rem; color: #bdc3c7; margin-bottom: 1rem;"></i>
                    <h3 style="color: #7f8c8d; margin-bottom: 1rem;">No se encontraron subastas</h3>
                    <p style="color: #95a5a6;">Intenta con términos de búsqueda diferentes</p>
                    <button onclick="location.reload()" class="btn btn-primary" style="margin-top: 1rem;">
                        Ver todas las subastas
                    </button>
                </div>
            `;
            return;
        }

        auctionsGrid.innerHTML = filteredAuctions.map(auction => {
            const status = this.getAuctionStatus(auction);
            const timeLeft = this.getTimeLeft(auction.endDate);
            const bidCount = this.bids.filter(bid => bid.auctionId === auction.id).length;
            
            return `
                <div class="auction-card" onclick="showAuctionDetail(${auction.id})">
                    <div class="auction-card-image">
                        <img src="${auction.images[0] || 'https://via.placeholder.com/300x200?text=Sin+Imagen'}" alt="${auction.title}">
                        <div class="status ${status.class}">${status.text}</div>
                    </div>
                    <div class="auction-card-content">
                        <h3>${auction.title}</h3>
                        <div class="category">${auction.category}</div>
                        <div class="price">${auction.currentPrice} tokens</div>
                        <div class="time-left">${timeLeft}</div>
                        <div class="bids">${bidCount} pujas</div>
                    </div>
                </div>
            `;
        }).join('');
    }

    startTimer() {
        setInterval(() => {
            this.renderAuctions();
            this.updateStats();
        }, 1000);
    }

    clearAuctionForm() {
        document.getElementById('auctionForm').reset();
        document.getElementById('imagePreview').innerHTML = `
            <i class="fas fa-images"></i>
            <p>Haz clic para seleccionar imágenes (múltiples)</p>
        `;
        document.getElementById('imagePreview').classList.remove('has-image');
    }

    // Configurar formulario de envío de obras
    setupArtworkSubmissionForm() {
        const form = document.getElementById('artworkSubmissionForm');
        if (form) {
            form.onsubmit = (e) => {
                e.preventDefault();
                this.submitArtwork();
            };
        }
    }

    // Enviar información de obra de arte
    submitArtwork() {
        const formData = new FormData(document.getElementById('artworkSubmissionForm'));
        const artworkData = {
            artistName: formData.get('artistName'),
            artworkTitle: formData.get('artworkTitle'),
            artworkYear: formData.get('artworkYear'),
            artworkTechnique: formData.get('artworkTechnique'),
            artworkDimensions: formData.get('artworkDimensions'),
            ownerName: formData.get('ownerName'),
            ownerEmail: formData.get('ownerEmail'),
            ownerPhone: formData.get('ownerPhone'),
            artworkDescription: formData.get('artworkDescription'),
            estimatedValue: formData.get('estimatedValue'),
            submittedAt: new Date().toISOString()
        };

        // Simular envío (en una implementación real iría a un servidor)
        console.log('Artwork submission:', artworkData);
        
        // Mostrar mensaje de éxito
        this.showNotification('¡Información enviada correctamente! Te contactaremos pronto.', 'success');
        
        // Limpiar formulario
        document.getElementById('artworkSubmissionForm').reset();
        
        // Opcional: Redirigir a inicio
        setTimeout(() => {
            this.showPage('home');
        }, 2000);
    }

    // === NUEVAS FUNCIONALIDADES ===







    // Renderizar tienda
    renderStore() {
        this.loadSampleStoreItems();
        this.displayStoreItems();
    }

    // Cargar items de muestra para la tienda (obras ganadas por bots)
    loadSampleStoreItems() {
        // La tienda ahora está vacía por defecto para que el admin suba productos reales
    }

    // Limpiar productos automáticamente generados
    clearAutoGeneratedStore() {
        // Limpiar completamente la tienda de productos automáticos
        this.storeItems = [];
        localStorage.setItem('storeItems', JSON.stringify(this.storeItems));
    }

    // Mostrar items de la tienda (solo productos del admin)
    displayStoreItems() {
        const container = document.getElementById('storeItemsContainer');
        const categoryFilter = document.getElementById('storeCategory').value;
        const priceFilter = document.getElementById('storePriceRange').value;
        
        let filteredItems = this.storeItems;
        
        if (categoryFilter) {
            filteredItems = filteredItems.filter(item => item.category === categoryFilter);
        }
        
        if (priceFilter) {
            filteredItems = filteredItems.filter(item => {
                switch(priceFilter) {
                    case '0-300': return item.finalPrice <= 300;
                    case '300-800': return item.finalPrice > 300 && item.finalPrice <= 800;
                    case '800-1500': return item.finalPrice > 800 && item.finalPrice <= 1500;
                    case '1500+': return item.finalPrice > 1500;
                    default: return true;
                }
            });
        }

        container.innerHTML = filteredItems.map(item => `
            <div class="store-item won-artwork">
                <div class="store-item-image" style="background-image: url(${item.image})">
                    <div class="won-badge">
                        <i class="fas fa-trophy"></i> GANADA
                    </div>
                </div>
                <div class="store-item-content">
                    <h3>${item.title}</h3>
                    <p class="artist">por ${item.artist}</p>
                    <p class="description">${item.description}</p>
                    <div class="auction-result">
                        <div class="final-price">
                            <i class="fas fa-gavel"></i> Precio final: ${item.finalPrice} tokens
                        </div>
                        <div class="winner-info">
                            <i class="fas fa-crown"></i> Ganada por: ${item.wonBy}
                        </div>
                        <div class="won-date">
                            <i class="fas fa-calendar"></i> ${new Date(item.wonDate).toLocaleDateString()}
                        </div>
                    </div>
                    <div class="artwork-stats">
                        <span class="views"><i class="fas fa-eye"></i> ${item.views}</span>
                        <span class="likes"><i class="fas fa-heart"></i> ${item.likes}</span>
                        <span class="status-badge">${item.status === 'won' ? 'Obra Única' : 'Disponible'}</span>
                    </div>
                </div>
            </div>
        `).join('');
    }

    // Comprar item de la tienda
    buyStoreItem(itemId) {
        if (!this.currentUser) {
            this.showAuthModal();
            return;
        }

        const item = this.storeItems.find(i => i.id === itemId);
        const requiredTokens = item.price; // 1€ = 1 token

        if (this.currentUser.tokens < requiredTokens) {
            this.showNotification(`Necesitas ${requiredTokens} tokens para esta compra`, 'error');
            this.showPage('tokens');
            return;
        }

        // Procesar compra
        this.currentUser.tokens -= requiredTokens;
        this.updateUser(this.currentUser);

        // Crear transacción
        const transaction = {
            id: this.transactionId++,
            userId: this.currentUser.id,
            type: 'store_purchase',
            amount: requiredTokens,
            itemId: itemId,
            itemTitle: item.title,
            timestamp: new Date().toISOString()
        };
        
        this.transactions.push(transaction);
        localStorage.setItem('transactions', JSON.stringify(this.transactions));

        this.showNotification(`¡Compra realizada! ${item.title} es tuyo por ${requiredTokens} tokens`, 'success');
        this.updateUserDisplay();
    }













    // === CONTROL DE BOTS FORZADOS ===
    
    // Llenar selectores del panel admin
    populateForcedWinSelectors() {
        const botSelect = document.getElementById('forceWinBot');
        const auctionSelect = document.getElementById('forceWinAuction');
        
        if (botSelect) {
            botSelect.innerHTML = '<option value="">Seleccionar bot...</option>';
            this.bots.forEach(bot => {
                if (bot.active) {
                    botSelect.innerHTML += `<option value="${bot.name}">${bot.name} (${bot.tokens} tokens)</option>`;
                }
            });
        }
        
        if (auctionSelect) {
            auctionSelect.innerHTML = '<option value="">Seleccionar subasta...</option>';
            this.auctions.forEach(auction => {
                if (auction.status === 'active') {
                    auctionSelect.innerHTML += `<option value="${auction.id}">${auction.title} (${auction.currentBid} tokens)</option>`;
                }
            });
        }
    }
    
    // Activar victoria forzada
    activateForcedWin() {
        const botName = document.getElementById('forceWinBot').value;
        const auctionId = document.getElementById('forceWinAuction').value;
        
        if (!botName || !auctionId) {
            this.showNotification('Selecciona un bot y una subasta', 'error');
            return;
        }
        
        const bot = this.bots.find(b => b.name === botName);
        const auction = this.auctions.find(a => a.id == auctionId);
        
        if (!bot || !auction) {
            this.showNotification('Bot o subasta no encontrados', 'error');
            return;
        }
        
        this.forcedWin = {
            active: true,
            botName: botName,
            auctionId: parseInt(auctionId)
        };
        
        const status = document.getElementById('forcedWinStatus');
        const text = document.getElementById('forcedWinText');
        
        if (status && text) {
            text.textContent = `${botName} ganará "${auction.title}" automáticamente`;
            status.style.display = 'block';
            status.classList.add('active');
        }
        
        this.showNotification(`Victoria forzada activada: ${botName} ganará "${auction.title}"`, 'success');
        
        // Guardar estado
        localStorage.setItem('forcedWin', JSON.stringify(this.forcedWin));
    }
    
    // Desactivar victoria forzada
    deactivateForcedWin() {
        this.forcedWin = { active: false, botName: null, auctionId: null };
        
        const status = document.getElementById('forcedWinStatus');
        if (status) {
            status.style.display = 'none';
            status.classList.remove('active');
        }
        
        this.showNotification('Victoria forzada desactivada', 'info');
        localStorage.removeItem('forcedWin');
    }
    
    // Modificar lógica de countdown para victoria forzada
    handleForcedWinCountdown(auctionId) {
        if (this.forcedWin.active && this.forcedWin.auctionId === auctionId) {
            const bot = this.bots.find(b => b.name === this.forcedWin.botName);
            if (bot && bot.active) {
                // El bot forzado hace una puja decisiva
                setTimeout(() => {
                    this.forcedBotBid(auctionId, bot);
                }, 500);
                return true; // Indica que se manejó la victoria forzada
            }
        }
        return false;
    }
    
    // Puja forzada del bot
    forcedBotBid(auctionId, bot) {
        const auction = this.auctions.find(a => a.id === auctionId);
        if (!auction || auction.status !== 'active') return;
        
        // Pujar 50-100 tokens más que la puja actual para asegurar victoria
        const extraBid = Math.floor(Math.random() * 51) + 50;
        const bidAmount = auction.currentBid + extraBid;
        
        // Asegurar que el bot tenga suficientes tokens
        if (bot.tokens < bidAmount) {
            bot.tokens = bidAmount + 1000; // Dar tokens extra al bot
        }
        
        const bid = {
            id: this.bidId++,
            auctionId: auctionId,
            bidderId: `bot-${bot.name}`,
            bidderName: bot.name,
            amount: bidAmount,
            timestamp: new Date().toISOString(),
            isBot: true,
            isWinning: true,
            isForced: true // Marcar como puja forzada
        };
        
        // Marcar pujas anteriores como no ganadoras
        this.bids.filter(b => b.auctionId === auctionId).forEach(b => b.isWinning = false);
        
        this.bids.push(bid);
        auction.currentBid = bidAmount;
        auction.highestBidder = bot.name;
        auction.bids++;
        bot.tokens -= bidAmount;
        
        this.saveToLocalStorage();
        this.renderAuctions();
        this.showNotification(`🎯 VICTORIA FORZADA: ${bot.name} pujó ${bidAmount} tokens y GANARÁ esta subasta`, 'warning');
        
        // Detener countdown y evitar más pujas
        this.stopCountdown(auctionId);
        
        // Cerrar subasta después de un breve delay
        setTimeout(() => {
            this.closeAuctionWithWinner(auctionId, bot.name);
        }, 3000);
    }
    
    // Cerrar subasta con ganador específico
    closeAuctionWithWinner(auctionId, winnerName) {
        const auction = this.auctions.find(a => a.id === auctionId);
        if (auction) {
            auction.status = 'closed';
            auction.winner = winnerName;
            auction.endedAt = new Date().toISOString();
            
            this.saveToLocalStorage();
            this.renderAuctions();
            this.showNotification(`✅ Subasta cerrada. Ganador: ${winnerName}`, 'success');
            
            // Desactivar victoria forzada después de usarla
            if (this.forcedWin.active && this.forcedWin.auctionId === auctionId) {
                this.deactivateForcedWin();
            }
        }
    }

    // Actualizar saveToLocalStorage para incluir nuevos datos
    saveToLocalStorage() {
        localStorage.setItem('auctions', JSON.stringify(this.auctions));
        localStorage.setItem('bids', JSON.stringify(this.bids));
        localStorage.setItem('users', JSON.stringify(this.users));

        localStorage.setItem('storeItems', JSON.stringify(this.storeItems));
        localStorage.setItem('linkedItems', JSON.stringify(this.linkedItems));

        localStorage.setItem('transactions', JSON.stringify(this.transactions));
        localStorage.setItem('currentUser', JSON.stringify(this.currentUser));
        localStorage.setItem('isAdmin', this.isAdmin);
        if (this.forcedWin.active) {
            localStorage.setItem('forcedWin', JSON.stringify(this.forcedWin));
        }
    }

    renderMyBids() {
        if (!this.currentUser) {
            document.getElementById('myBidsContainer').innerHTML = `
                <div class="empty-state">
                    <i class="fas fa-user"></i>
                    <h3>Debes iniciar sesión</h3>
                    <p>Inicia sesión para ver tus pujas</p>
                </div>
            `;
            return;
        }

        const userBids = this.bids.filter(bid => bid.userId === this.currentUser.id);
        
        if (userBids.length === 0) {
            document.getElementById('myBidsContainer').innerHTML = `
                <div class="empty-state">
                    <i class="fas fa-hand-paper"></i>
                    <h3>No has realizado pujas</h3>
                    <p>¡Participa en las subastas para ver tus pujas aquí!</p>
                </div>
            `;
            return;
        }

        const bidsHTML = userBids.map(bid => {
            const auction = this.auctions.find(a => a.id === bid.auctionId);
            if (!auction) return '';

            const status = this.getAuctionStatus(auction);
            const timeLeft = this.getTimeLeft(auction.endDate);
            
            return `
                <div class="bid-item">
                    <div class="bid-auction">
                        <h4>${auction.title}</h4>
                        <div class="bid-details">
                            <span class="bid-amount">${bid.amount} tokens</span>
                            <span class="bid-time">${new Date(bid.timestamp).toLocaleString()}</span>
                        </div>
                    </div>
                    <div class="auction-status">
                        <span class="status ${status.class}">${status.text}</span>
                        <span class="time-left">${timeLeft}</span>
                    </div>
                </div>
            `;
        }).join('');

        document.getElementById('myBidsContainer').innerHTML = bidsHTML;
    }

    renderTokensPage() {
        // Esta función ya está implementada en el HTML
    }

    renderAdminPage() {
        this.switchAdminTab('bots');
        this.populateForcedWinSelectors();
        this.loadForcedWinState();
    }
    
    // Cargar estado de victoria forzada
    loadForcedWinState() {
        const saved = localStorage.getItem('forcedWin');
        if (saved) {
            this.forcedWin = JSON.parse(saved);
            if (this.forcedWin.active) {
                const status = document.getElementById('forcedWinStatus');
                const text = document.getElementById('forcedWinText');
                const auction = this.auctions.find(a => a.id === this.forcedWin.auctionId);
                
                if (status && text && auction) {
                    text.textContent = `${this.forcedWin.botName} ganará "${auction.title}" automáticamente`;
                    status.style.display = 'block';
                    status.classList.add('active');
                }
            }
        }
    }

    renderBotsList() {
        const botsContainer = document.getElementById('botsList');
        if (!botsContainer) return;

        botsContainer.innerHTML = this.bots.map(bot => `
            <div class="bot-item">
                <div class="bot-info">
                    <div class="bot-name">${bot.name}</div>
                    <div class="bot-details">
                        <span class="bot-tokens">${bot.tokens} tokens</span>
                        <span class="bot-aggressiveness">${Math.round(bot.aggressiveness * 100)}% agresivo</span>
                    </div>
                </div>
                <div class="bot-actions">
                    <button class="btn btn-sm ${bot.active ? 'btn-success' : 'btn-secondary'}" 
                            onclick="toggleBot(${bot.id})">
                        ${bot.active ? 'Activo' : 'Inactivo'}
                    </button>
                    <button class="btn btn-sm btn-primary" onclick="editBot(${bot.id})">
                        <i class="fas fa-edit"></i>
                    </button>
                    <button class="btn btn-sm btn-danger" onclick="deleteBot(${bot.id})">
                        <i class="fas fa-trash"></i>
                    </button>
                </div>
            </div>
        `).join('');
    }

    updateBotStats() {
        const totalBots = this.bots.length;
        const activeBots = this.bots.filter(bot => bot.active).length;
        const totalBotTokens = this.bots.reduce((sum, bot) => sum + bot.tokens, 0);
        const avgAggressiveness = this.bots.reduce((sum, bot) => sum + bot.aggressiveness, 0) / this.bots.length;

        document.getElementById('totalBots').textContent = totalBots;
        document.getElementById('activeBots').textContent = activeBots;
        document.getElementById('totalBotTokens').textContent = totalBotTokens;
        document.getElementById('avgAggressiveness').textContent = `${Math.round(avgAggressiveness * 100)}%`;
        document.getElementById('botActivity').textContent = this.botActivity;
    }

    setupBotControls() {
        const botsEnabledCheckbox = document.getElementById('botsEnabled');
        if (botsEnabledCheckbox) {
            botsEnabledCheckbox.checked = this.botsEnabled;
            botsEnabledCheckbox.addEventListener('change', (e) => {
                this.botsEnabled = e.target.checked;
                this.showNotification(
                    `Bots ${this.botsEnabled ? 'activados' : 'desactivados'}`, 
                    'info'
                );
            });
        }
    }

    renderUsersList() {
        const usersContainer = document.getElementById('usersList');
        if (!usersContainer) return;

        usersContainer.innerHTML = this.users.map(user => `
            <div class="user-item">
                <div class="user-info">
                    <div class="user-name">${user.name}</div>
                    <div class="user-details">
                        <span class="user-email">${user.email}</span>
                        <span class="user-tokens">${user.tokens} tokens</span>
                        <span class="user-status ${user.status || 'active'}">${user.status || 'active'}</span>
                    </div>
                </div>
                <div class="user-actions">
                    <button class="btn btn-sm btn-primary" onclick="editUser(${user.id})">
                        <i class="fas fa-edit"></i> Editar
                    </button>
                    <button class="btn btn-sm btn-info" onclick="viewUserCard(${user.id})">
                        <i class="fas fa-credit-card"></i> Tarjeta
                    </button>
                    <button class="btn btn-sm btn-success" onclick="giftTokens(${user.id})">
                        <i class="fas fa-gift"></i>
                    </button>
                    <button class="btn btn-sm btn-warning" onclick="toggleUserStatus(${user.id})">
                        ${user.status === 'active' ? 'Suspender' : 'Reactivar'}
                    </button>
                    <button class="btn btn-sm btn-danger" onclick="banUser(${user.id})">
                        <i class="fas fa-ban"></i>
                    </button>
                </div>
            </div>
        `).join('');
    }

    updateUserStats() {
        const totalUsers = this.users.length;
        const activeUsers = this.users.filter(user => !user.status || user.status === 'active').length;
        const suspendedUsers = this.users.filter(user => user.status === 'suspended').length;
        const bannedUsers = this.users.filter(user => user.status === 'banned').length;
        const totalUserTokens = this.users.reduce((sum, user) => sum + user.tokens, 0);

        document.getElementById('totalUsers').textContent = totalUsers;
        document.getElementById('activeUsers').textContent = activeUsers;
        document.getElementById('suspendedUsers').textContent = suspendedUsers;
        document.getElementById('bannedUsers').textContent = bannedUsers;
        document.getElementById('totalUserTokens').textContent = totalUserTokens;
    }

    switchAdminTab(tabName) {
        // Update tab buttons
        document.querySelectorAll('.tab-button').forEach(btn => {
            btn.classList.remove('active');
        });
        document.querySelector(`[data-tab="${tabName}"]`).classList.add('active');

        // Update tab content
        document.querySelectorAll('.tab-panel').forEach(panel => {
            panel.classList.remove('active');
        });
        document.getElementById(`${tabName}-tab`).classList.add('active');

        // Load specific content
        switch(tabName) {
            case 'bots':
                this.renderBotsList();
                this.updateBotStats();
                this.setupBotControls();
                break;
            case 'users':
                this.renderUsersList();
                this.updateUserStats();
                break;
            case 'stats':
                this.updateAllStats();
                break;
        }
    }

    updateAllStats() {
        this.updateBotStats();
        this.updateUserStats();
        
        const totalAuctions = this.auctions.length;
        const activeAuctions = this.auctions.filter(auction => {
            const now = new Date();
            const endDate = new Date(auction.endDate);
            return endDate > now;
        }).length;
        const totalBids = this.bids.length;
        
        document.getElementById('totalAuctions').textContent = totalAuctions;
        document.getElementById('activeAuctions').textContent = activeAuctions;
        document.getElementById('totalBids').textContent = totalBids;
    }
}

// Initialize the application
const auctionHouse = new AuctionHouse();

// Global functions
function showPage(pageName) {
    auctionHouse.showPage(pageName);
}

function showAuthModal() {
    auctionHouse.showAuthModal();
}

function showLoginForm() {
    auctionHouse.showLoginForm();
}

function showRegisterForm() {
    auctionHouse.showRegisterForm();
}

function enableAdminMode() {
    auctionHouse.enableAdminMode();
}

function disableAdminMode() {
    auctionHouse.disableAdminMode();
}

function logout() {
    auctionHouse.logout();
}

function showAuctionDetail(id) {
    auctionHouse.showAuctionDetail(id);
}

function showBidModal(auctionId) {
    auctionHouse.showBidModal(auctionId);
}

function selectPackage(tokens) {
    const packages = {
        10: { tokens: 10, price: 10, bonus: 0 },
        50: { tokens: 50, price: 50, bonus: 5 },
        100: { tokens: 100, price: 100, bonus: 15 },
        200: { tokens: 200, price: 200, bonus: 40 },
        500: { tokens: 500, price: 500, bonus: 125 },
        1000: { tokens: 1000, price: 1000, bonus: 300 }
    };
    
    const package = packages[tokens];
    if (!package) return;
    
    if (!auctionHouse.currentUser) {
        auctionHouse.showNotification('Debes iniciar sesión para comprar tokens', 'error');
        return;
    }
    
    // Simular compra de tokens
    auctionHouse.currentUser.tokens += package.tokens + package.bonus;
    auctionHouse.saveToLocalStorage();
    auctionHouse.updateUserDisplay();
    
    const transaction = {
        id: auctionHouse.transactionId++,
        userId: auctionHouse.currentUser.id,
        type: 'purchase',
        amount: package.tokens + package.bonus,
        price: package.price,
        timestamp: new Date().toISOString()
    };
    
    auctionHouse.transactions.push(transaction);
    auctionHouse.saveToLocalStorage();
    
    auctionHouse.showNotification(`Compra exitosa: ${package.tokens} tokens + ${package.bonus} bonus`, 'success');
}

// Bot management functions
function toggleBot(botId) {
    const bot = auctionHouse.bots.find(b => b.id === botId);
    if (bot) {
        bot.active = !bot.active;
        auctionHouse.renderBotsList();
        auctionHouse.showNotification(
            `${bot.name} ${bot.active ? 'activado' : 'desactivado'}`, 
            'info'
        );
    }
}

function editBot(botId) {
    const bot = auctionHouse.bots.find(b => b.id === botId);
    if (!bot) return;

    document.getElementById('editBotName').value = bot.name;
    document.getElementById('editBotTokens').value = bot.tokens;
    document.getElementById('editBotAggressiveness').value = bot.aggressiveness;
    document.getElementById('editBotActive').checked = bot.active;
    document.getElementById('botEditForm').dataset.botId = botId;
    document.getElementById('botEditModal').style.display = 'block';
}

function closeBotEditModal() {
    document.getElementById('botEditModal').style.display = 'none';
}

function saveBotEdit() {
    const botId = parseInt(document.getElementById('botEditForm').dataset.botId);
    const bot = auctionHouse.bots.find(b => b.id === botId);
    
    if (!bot) return;

    const newName = document.getElementById('editBotName').value.trim();
    const newTokens = parseInt(document.getElementById('editBotTokens').value);
    const newAggressiveness = parseFloat(document.getElementById('editBotAggressiveness').value);
    const newActive = document.getElementById('editBotActive').checked;

    if (!newName || newTokens < 0 || newAggressiveness < 0 || newAggressiveness > 1) {
        auctionHouse.showNotification('Por favor, completa todos los campos correctamente', 'error');
        return;
    }

    bot.name = newName;
    bot.tokens = newTokens;
    bot.aggressiveness = newAggressiveness;
    bot.active = newActive;

    auctionHouse.saveToLocalStorage();
    auctionHouse.renderBotsList();
    auctionHouse.updateBotStats();
    closeBotEditModal();
    auctionHouse.showNotification(`Bot ${bot.name} actualizado`, 'success');
}

function deleteBot(botId) {
    if (auctionHouse.bots.length <= 1) {
        auctionHouse.showNotification('Debe haber al menos un bot', 'error');
        return;
    }
    
    const bot = auctionHouse.bots.find(b => b.id === botId);
    if (!bot) return;
    
    if (confirm(`¿Estás seguro de que quieres eliminar el bot ${bot.name}?`)) {
        auctionHouse.bots = auctionHouse.bots.filter(b => b.id !== botId);
        auctionHouse.saveToLocalStorage();
        auctionHouse.renderBotsList();
        auctionHouse.updateBotStats();
        auctionHouse.showNotification(`Bot ${bot.name} eliminado`, 'info');
    }
}

function addBot() {
    const newBot = {
        id: Math.max(...auctionHouse.bots.map(b => b.id)) + 1,
        name: `Bot${auctionHouse.bots.length + 1}`,
        tokens: 5000,
        aggressiveness: 0.7,
        active: true
    };
    
    auctionHouse.bots.push(newBot);
    auctionHouse.saveToLocalStorage();
    auctionHouse.renderBotsList();
    auctionHouse.updateBotStats();
    auctionHouse.showNotification(`Bot ${newBot.name} añadido`, 'success');
}

function resetBots() {
    if (confirm('¿Estás seguro de que quieres resetear todos los bots?')) {
        auctionHouse.bots = [
            { id: 1, name: 'ArteLover', tokens: 5000, aggressiveness: 0.7, active: true },
            { id: 2, name: 'CollectorPro', tokens: 8000, aggressiveness: 0.8, active: true },
            { id: 3, name: 'ArtInvestor', tokens: 12000, aggressiveness: 0.6, active: true },
            { id: 4, name: 'GalleryMaster', tokens: 15000, aggressiveness: 0.9, active: true },
            { id: 5, name: 'VintageHunter', tokens: 3000, aggressiveness: 0.5, active: true }
        ];
        
        auctionHouse.botActivity = 0;
        auctionHouse.saveToLocalStorage();
        auctionHouse.renderBotsList();
        auctionHouse.updateBotStats();
        auctionHouse.showNotification('Bots reseteados', 'info');
    }
}

// User management functions
function editUser(userId) {
    const user = auctionHouse.users.find(u => u.id === userId);
    if (!user) return;

    document.getElementById('editUserName').value = user.name;
    document.getElementById('editUserEmail').value = user.email;
    document.getElementById('editUserTokens').value = user.tokens;
    document.getElementById('editUserStatus').value = user.status || 'active';
    document.getElementById('userEditForm').dataset.userId = userId;
    document.getElementById('userEditModal').style.display = 'block';
}

function closeUserEditModal() {
    document.getElementById('userEditModal').style.display = 'none';
}

function saveUserEdit() {
    const userId = parseInt(document.getElementById('userEditForm').dataset.userId);
    const user = auctionHouse.users.find(u => u.id === userId);
    
    if (!user) return;

    const newName = document.getElementById('editUserName').value.trim();
    const newEmail = document.getElementById('editUserEmail').value.trim();
    const newTokens = parseInt(document.getElementById('editUserTokens').value);
    const newStatus = document.getElementById('editUserStatus').value;

    if (!newName || !newEmail || newTokens < 0) {
        auctionHouse.showNotification('Por favor, completa todos los campos correctamente', 'error');
        return;
    }

    user.name = newName;
    user.email = newEmail.toLowerCase();
    user.tokens = newTokens;
    user.status = newStatus;

    auctionHouse.saveToLocalStorage();
    auctionHouse.renderUsersList();
    auctionHouse.updateUserStats();
    closeUserEditModal();
    auctionHouse.showNotification(`Usuario ${user.name} actualizado`, 'success');
}

function giftTokens(userId) {
    const user = auctionHouse.users.find(u => u.id === userId);
    if (!user) return;

    document.getElementById('giftTokensAmount').value = '';
    document.getElementById('giftTokensReason').value = '';
    document.getElementById('giftTokensForm').dataset.userId = userId;
    document.getElementById('giftTokensModal').style.display = 'block';
}

function closeGiftTokensModal() {
    document.getElementById('giftTokensModal').style.display = 'none';
}

function sendGiftTokens() {
    const userEmail = document.getElementById('giftUserEmail').value.trim();
    const user = auctionHouse.users.find(u => u.email.toLowerCase() === userEmail.toLowerCase());
    
    if (!user) {
        auctionHouse.showNotification('Usuario no encontrado', 'error');
        return;
    }

    const amount = parseInt(document.getElementById('giftTokensAmount').value);
    const reason = document.getElementById('giftTokensReason').value.trim();

    if (!amount || amount <= 0) {
        auctionHouse.showNotification('Por favor, introduce una cantidad válida', 'error');
        return;
    }

    user.tokens += amount;
    auctionHouse.saveToLocalStorage();
    auctionHouse.renderUsersList();
    auctionHouse.updateUserStats();
    closeGiftTokensModal();
    
    auctionHouse.showNotification(`${amount} tokens regalados a ${user.name}`, 'success');
}

function toggleUserStatus(userId) {
    const user = auctionHouse.users.find(u => u.id === userId);
    if (!user) return;
    
    if (user.status === 'active') {
        user.status = 'suspended';
        auctionHouse.showNotification(`Usuario ${user.name} suspendido`, 'warning');
    } else {
        user.status = 'active';
        auctionHouse.showNotification(`Usuario ${user.name} reactivado`, 'success');
    }
    
    auctionHouse.saveToLocalStorage();
    auctionHouse.renderUsersList();
    auctionHouse.updateUserStats();
}

function banUser(userId) {
    const user = auctionHouse.users.find(u => u.id === userId);
    if (!user) return;
    
    if (confirm(`¿Estás seguro de que quieres banear al usuario ${user.name}?`)) {
        user.status = 'banned';
        auctionHouse.saveToLocalStorage();
        auctionHouse.renderUsersList();
        auctionHouse.updateUserStats();
        auctionHouse.showNotification(`Usuario ${user.name} baneado`, 'error');
    }
}

function openGiftTokensModal() {
    document.getElementById('giftUserEmail').value = '';
    document.getElementById('giftTokensAmount').value = '';
    document.getElementById('giftTokensReason').value = '';
    document.getElementById('giftTokensModal').style.display = 'block';
}

// Función global para limpiar todos los datos
window.clearAllData = function() {
    if (confirm('¿Estás seguro de que quieres limpiar todos los datos? Esto eliminará usuarios, subastas, pujas y transacciones.')) {
        localStorage.clear();
        location.reload();
    }
}

// Función global para regenerar las 103 reviews (optimizada)
window.regenerateReviews = function() {
    console.log('🔄 Regenerando opiniones y obras...');
    localStorage.removeItem('reviews');
    localStorage.removeItem('storeItems');
    
    // Usar setTimeout para evitar bloqueo de la UI
    setTimeout(() => {
        try {

            // No generamos productos automáticos, solo actualizamos la tienda

            localStorage.setItem('storeItems', JSON.stringify(auction.storeItems));
            auction.showNotification('✅ Tienda actualizada correctamente', 'success');
            

            if (document.getElementById('store').style.display !== 'none') {
                auction.displayStoreItems();
            }
            console.log('✅ Regeneración completada');
        } catch (error) {
            console.error('❌ Error en regeneración:', error);
            auction.showNotification('Error al actualizar tienda', 'error');
        }
    }, 100);
}

// Limpiar localStorage automáticamente si hay problemas
if (typeof window !== 'undefined') {
    setTimeout(() => {
        const existingReviews = JSON.parse(localStorage.getItem('reviews') || '[]');
        if (existingReviews.length > 0 && existingReviews.length < 103) {
            console.log('🧹 Limpiando reviews incompletos...');
            localStorage.removeItem('reviews');
            localStorage.removeItem('storeItems');
        }
    }, 1000);
}

// Función para mostrar modal de puja desde el countdown
function showBidModalFromCountdown() {
    const countdownModal = document.getElementById('countdownModal');
    const auctionId = countdownModal.dataset.auctionId;
    if (auctionId) {
        countdownModal.style.display = 'none';
        auctionHouse.showBidModal(parseInt(auctionId));
    }
}

// Función de prueba para registro
function testRegistration() {
    auctionHouse.showNotification('Función de prueba: Registro simulado completado', 'info');
}

// Función global para limpiar formulario de subasta
function clearAuctionForm() {
    auctionHouse.clearAuctionForm();
}

// Funciones globales para la tienda
function filterStoreItems() {
    auctionHouse.displayStoreItems();
}

function buyStoreItem(itemId) {
    auctionHouse.buyStoreItem(itemId);
}

// Funciones globales para control de bots forzados
function activateForcedWin() {
    auctionHouse.activateForcedWin();
}

function deactivateForcedWin() {
    auctionHouse.deactivateForcedWin();
}

// === HERRAMIENTAS DE RESOLUCIÓN DE CONFLICTOS ===

// Sistema de logging
class SystemLogger {
    constructor() {
        this.logs = JSON.parse(localStorage.getItem('systemLogs')) || [];
        this.maxLogs = 1000;
    }

    log(level, message, data = null) {
        const logEntry = {
            timestamp: new Date().toISOString(),
            level: level,
            message: message,
            data: data
        };
        
        this.logs.unshift(logEntry);
        
        if (this.logs.length > this.maxLogs) {
            this.logs = this.logs.slice(0, this.maxLogs);
        }
        
        localStorage.setItem('systemLogs', JSON.stringify(this.logs));
    }

    error(message, data = null) { this.log('error', message, data); }
    warning(message, data = null) { this.log('warning', message, data); }
    info(message, data = null) { this.log('info', message, data); }
    debug(message, data = null) { this.log('debug', message, data); }

    getLogs() { return this.logs; }
    clearLogs() { 
        this.logs = [];
        localStorage.removeItem('systemLogs');
    }
}

const systemLogger = new SystemLogger();

// Funciones de diagnóstico y resolución
function checkDataIntegrity() {
    const container = document.getElementById('dataIntegrityResults');
    container.classList.add('active');
    container.innerHTML = '<div class="info">🔍 Verificando integridad de datos...</div>';
    
    systemLogger.info('Iniciando verificación de integridad de datos');
    
    setTimeout(() => {
        const issues = [];
        
        try {
            const auctions = JSON.parse(localStorage.getItem('auctions') || '[]');
            auctions.forEach((auction, index) => {
                if (!auction.id || !auction.title || !auction.startingPrice) {
                    issues.push(`Subasta ${index}: Faltan campos obligatorios`);
                }
                if (auction.currentPrice < 0) {
                    issues.push(`Subasta ${auction.title}: Precio negativo`);
                }
            });
        } catch (e) {
            issues.push('Error al cargar subastas: ' + e.message);
        }

        try {
            const users = JSON.parse(localStorage.getItem('users') || '[]');
            const emails = new Set();
            users.forEach((user, index) => {
                if (!user.email || !user.name) {
                    issues.push(`Usuario ${index}: Faltan campos obligatorios`);
                }
                if (emails.has(user.email)) {
                    issues.push(`Email duplicado: ${user.email}`);
                }
                emails.add(user.email);
                
                if (user.tokens < 0) {
                    issues.push(`Usuario ${user.name}: Tokens negativos`);
                }
            });
        } catch (e) {
            issues.push('Error al cargar usuarios: ' + e.message);
        }

        let result = '';
        if (issues.length === 0) {
            result = '<div class="success">✅ Integridad verificada: No se encontraron problemas</div>';
            systemLogger.info('Verificación de integridad completada: Sin problemas');
        } else {
            result = '<div class="warning">⚠️ Se encontraron ' + issues.length + ' problemas:</div>';
            issues.forEach(issue => {
                result += '<div class="error">• ' + issue + '</div>';
            });
            systemLogger.warning('Verificación de integridad completada', { issues: issues });
        }
        
        container.innerHTML = result;
    }, 1500);
}

function fixDataCorruption() {
    const container = document.getElementById('dataIntegrityResults');
    container.classList.add('active');
    container.innerHTML = '<div class="info">🔧 Reparando datos corruptos...</div>';
    
    systemLogger.info('Iniciando reparación de datos');
    
    setTimeout(() => {
        let fixed = 0;
        
        try {
            const auctions = JSON.parse(localStorage.getItem('auctions') || '[]');
            const cleanAuctions = auctions.filter(auction => {
                if (!auction.id || !auction.title || !auction.startingPrice) {
                    fixed++;
                    return false;
                }
                if (auction.currentPrice < 0) {
                    auction.currentPrice = auction.startingPrice;
                    fixed++;
                }
                return true;
            });
            localStorage.setItem('auctions', JSON.stringify(cleanAuctions));
        } catch (e) {
            systemLogger.error('Error reparando subastas', e);
        }

        container.innerHTML = `<div class="success">✅ Reparación completada: ${fixed} problemas resueltos</div>`;
        systemLogger.info('Reparación de datos completada', { fixed: fixed });
        
        if (window.auction) {
            window.auction.auctions = JSON.parse(localStorage.getItem('auctions') || '[]');
            window.auction.users = JSON.parse(localStorage.getItem('users') || '[]');
            window.auction.bids = JSON.parse(localStorage.getItem('bids') || '[]');
        }
    }, 2000);
}

function optimizeDatabase() {
    const container = document.getElementById('dataIntegrityResults');
    container.classList.add('active');
    container.innerHTML = '<div class="info">⚡ Optimizando base de datos...</div>';
    
    systemLogger.info('Iniciando optimización de base de datos');
    
    setTimeout(() => {
        let optimized = 0;
        
        ['auctions', 'users', 'bids', 'transactions', 'storeItems'].forEach(key => {
            try {
                const data = JSON.parse(localStorage.getItem(key) || '[]');
                if (Array.isArray(data)) {
                    data.forEach((item, index) => {
                        if (item.id !== index + 1) {
                            item.id = index + 1;
                            optimized++;
                        }
                    });
                    localStorage.setItem(key, JSON.stringify(data));
                }
            } catch (e) {
                systemLogger.error(`Error optimizando ${key}`, e);
            }
        });
        
        container.innerHTML = `<div class="success">✅ Optimización completada: ${optimized} registros reindexados</div>`;
        systemLogger.info('Optimización completada', { optimized: optimized });
    }, 1500);
}

function fixStuckAuctions() {
    const container = document.getElementById('auctionIssuesResults');
    container.classList.add('active');
    container.innerHTML = '<div class="info">🔓 Resolviendo subastas bloqueadas...</div>';
    
    systemLogger.info('Resolviendo subastas bloqueadas');
    
    setTimeout(() => {
        let fixed = 0;
        try {
            const auctions = JSON.parse(localStorage.getItem('auctions') || '[]');
            auctions.forEach(auction => {
                const now = new Date();
                const endDate = new Date(auction.endDate);
                
                if (endDate < now && auction.status === 'active') {
                    auction.status = 'ended';
                    fixed++;
                }
                
                if (!auction.status || auction.status === 'undefined') {
                    auction.status = 'active';
                    fixed++;
                }
            });
            
            localStorage.setItem('auctions', JSON.stringify(auctions));
            container.innerHTML = `<div class="success">✅ ${fixed} subastas desbloqueadas</div>`;
            systemLogger.info('Subastas desbloqueadas', { fixed: fixed });
        } catch (e) {
            container.innerHTML = '<div class="error">❌ Error al resolver subastas</div>';
            systemLogger.error('Error resolviendo subastas', e);
        }
    }, 1000);
}

function resetAuctionTimers() {
    const container = document.getElementById('auctionIssuesResults');
    container.classList.add('active');
    container.innerHTML = '<div class="info">⏰ Reseteando contadores...</div>';
    
    systemLogger.info('Reseteando contadores de subastas');
    
    setTimeout(() => {
        if (window.auction && window.auction.countdownIntervals) {
            window.auction.countdownIntervals.forEach(interval => clearInterval(interval));
            window.auction.countdownIntervals.clear();
        }
        
        container.innerHTML = '<div class="success">✅ Contadores reseteados</div>';
        systemLogger.info('Contadores de subastas reseteados');
        
        if (window.auction) {
            window.auction.startTimer();
        }
    }, 800);
}

function validateBids() {
    const container = document.getElementById('auctionIssuesResults');
    container.classList.add('active');
    container.innerHTML = '<div class="info">✋ Validando pujas...</div>';
    
    systemLogger.info('Validando pujas');
    
    setTimeout(() => {
        let invalid = 0;
        try {
            const bids = JSON.parse(localStorage.getItem('bids') || '[]');
            const auctions = JSON.parse(localStorage.getItem('auctions') || '[]');
            const auctionIds = new Set(auctions.map(a => a.id));
            
            const validBids = bids.filter(bid => {
                if (!auctionIds.has(bid.auctionId)) {
                    invalid++;
                    return false;
                }
                if (bid.amount <= 0 || !bid.bidderId) {
                    invalid++;
                    return false;
                }
                return true;
            });
            
            localStorage.setItem('bids', JSON.stringify(validBids));
            container.innerHTML = `<div class="success">✅ Validación completada: ${invalid} pujas inválidas eliminadas</div>`;
            systemLogger.info('Validación de pujas completada', { invalid: invalid });
        } catch (e) {
            container.innerHTML = '<div class="error">❌ Error validando pujas</div>';
            systemLogger.error('Error validando pujas', e);
        }
    }, 1200);
}

function fixDuplicateUsers() {
    const container = document.getElementById('userIssuesResults');
    container.classList.add('active');
    container.innerHTML = '<div class="info">👥 Eliminando usuarios duplicados...</div>';
    
    systemLogger.info('Eliminando usuarios duplicados');
    
    setTimeout(() => {
        try {
            const users = JSON.parse(localStorage.getItem('users') || '[]');
            const emails = new Set();
            const uniqueUsers = [];
            let duplicates = 0;
            
            users.forEach(user => {
                if (!emails.has(user.email)) {
                    emails.add(user.email);
                    uniqueUsers.push(user);
                } else {
                    duplicates++;
                }
            });
            
            localStorage.setItem('users', JSON.stringify(uniqueUsers));
            container.innerHTML = `<div class="success">✅ ${duplicates} usuarios duplicados eliminados</div>`;
            systemLogger.info('Usuarios duplicados eliminados', { duplicates: duplicates });
        } catch (e) {
            container.innerHTML = '<div class="error">❌ Error eliminando duplicados</div>';
            systemLogger.error('Error eliminando usuarios duplicados', e);
        }
    }, 1000);
}

function resetUserSessions() {
    const container = document.getElementById('userIssuesResults');
    container.classList.add('active');
    container.innerHTML = '<div class="info">🚪 Reseteando sesiones...</div>';
    
    systemLogger.info('Reseteando sesiones de usuarios');
    
    setTimeout(() => {
        localStorage.removeItem('currentUser');
        container.innerHTML = '<div class="success">✅ Todas las sesiones han sido cerradas</div>';
        systemLogger.info('Sesiones de usuarios reseteadas');
    }, 800);
}

function validateTokenBalances() {
    const container = document.getElementById('userIssuesResults');
    container.classList.add('active');
    container.innerHTML = '<div class="info">🪙 Validando balances...</div>';
    
    systemLogger.info('Validando balances de tokens');
    
    setTimeout(() => {
        try {
            const users = JSON.parse(localStorage.getItem('users') || '[]');
            let fixed = 0;
            
            users.forEach(user => {
                if (user.tokens < 0) {
                    user.tokens = 0;
                    fixed++;
                }
                if (!Number.isInteger(user.tokens)) {
                    user.tokens = Math.floor(user.tokens);
                    fixed++;
                }
            });
            
            localStorage.setItem('users', JSON.stringify(users));
            container.innerHTML = `<div class="success">✅ Balances validados: ${fixed} correcciones aplicadas</div>`;
            systemLogger.info('Balances validados', { fixed: fixed });
        } catch (e) {
            container.innerHTML = '<div class="error">❌ Error validando balances</div>';
            systemLogger.error('Error validando balances', e);
        }
    }, 1000);
}

function clearExpiredData() {
    const container = document.getElementById('systemCleanupResults');
    container.classList.add('active');
    container.innerHTML = '<div class="info">🗑️ Limpiando datos expirados...</div>';
    
    systemLogger.info('Limpiando datos expirados');
    
    setTimeout(() => {
        let cleared = 0;
        const now = new Date();
        const thirtyDaysAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);
        
        try {
            const transactions = JSON.parse(localStorage.getItem('transactions') || '[]');
            const recentTransactions = transactions.filter(t => {
                const transDate = new Date(t.timestamp || t.date);
                if (transDate < thirtyDaysAgo) {
                    cleared++;
                    return false;
                }
                return true;
            });
            localStorage.setItem('transactions', JSON.stringify(recentTransactions));
        } catch (e) {
            systemLogger.error('Error limpiando transacciones', e);
        }
        
        container.innerHTML = `<div class="success">✅ ${cleared} registros expirados eliminados</div>`;
        systemLogger.info('Datos expirados eliminados', { cleared: cleared });
    }, 1500);
}

function compactStorage() {
    const container = document.getElementById('systemCleanupResults');
    container.classList.add('active');
    container.innerHTML = '<div class="info">📦 Compactando almacenamiento...</div>';
    
    systemLogger.info('Compactando almacenamiento');
    
    setTimeout(() => {
        let compacted = 0;
        
        Object.keys(localStorage).forEach(key => {
            try {
                const data = localStorage.getItem(key);
                const parsed = JSON.parse(data);
                const compressed = JSON.stringify(parsed);
                if (compressed.length < data.length) {
                    localStorage.setItem(key, compressed);
                    compacted++;
                }
            } catch (e) {
                // No es JSON, ignorar
            }
        });
        
        container.innerHTML = `<div class="success">✅ Almacenamiento compactado: ${compacted} elementos optimizados</div>`;
        systemLogger.info('Almacenamiento compactado', { compacted: compacted });
    }, 1200);
}

function generateSystemReport() {
    const container = document.getElementById('systemCleanupResults');
    container.classList.add('active');
    container.innerHTML = '<div class="info">📋 Generando reporte...</div>';
    
    systemLogger.info('Generando reporte del sistema');
    
    setTimeout(() => {
        const report = {
            timestamp: new Date().toISOString(),
            storage: {},
            stats: {},
            health: 'healthy'
        };
        
        Object.keys(localStorage).forEach(key => {
            try {
                const data = localStorage.getItem(key);
                const parsed = JSON.parse(data);
                report.storage[key] = {
                    size: data.length,
                    items: Array.isArray(parsed) ? parsed.length : 1,
                    type: Array.isArray(parsed) ? 'array' : typeof parsed
                };
            } catch (e) {
                report.storage[key] = { size: data.length, type: 'string' };
            }
        });
        
        report.stats.totalUsers = JSON.parse(localStorage.getItem('users') || '[]').length;
        report.stats.totalAuctions = JSON.parse(localStorage.getItem('auctions') || '[]').length;
        report.stats.totalBids = JSON.parse(localStorage.getItem('bids') || '[]').length;
        report.stats.storageUsed = JSON.stringify(localStorage).length;
        
        const reportText = JSON.stringify(report, null, 2);
        const blob = new Blob([reportText], { type: 'application/json' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `artbiddo-report-${new Date().toISOString().split('T')[0]}.json`;
        a.click();
        
        container.innerHTML = '<div class="success">✅ Reporte generado y descargado</div>';
        systemLogger.info('Reporte del sistema generado');
    }, 1000);
}

function emergencyStopAllAuctions() {
    if (!confirm('¿Estás seguro? Esto detendrá TODAS las subastas activas inmediatamente.')) return;
    
    const container = document.getElementById('emergencyResults');
    container.classList.add('active');
    container.innerHTML = '<div class="error">🛑 Deteniendo todas las subastas...</div>';
    
    systemLogger.error('EMERGENCIA: Deteniendo todas las subastas');
    
    setTimeout(() => {
        try {
            const auctions = JSON.parse(localStorage.getItem('auctions') || '[]');
            let stopped = 0;
            
            auctions.forEach(auction => {
                if (auction.status === 'active') {
                    auction.status = 'emergency_stopped';
                    auction.endDate = new Date().toISOString();
                    stopped++;
                }
            });
            
            localStorage.setItem('auctions', JSON.stringify(auctions));
            container.innerHTML = `<div class="error">🛑 ${stopped} subastas detenidas en modo emergencia</div>`;
            systemLogger.error('Todas las subastas detenidas en emergencia', { stopped: stopped });
        } catch (e) {
            container.innerHTML = '<div class="error">❌ Error deteniendo subastas</div>';
            systemLogger.error('Error en parada de emergencia', e);
        }
    }, 1000);
}

function emergencyResetSystem() {
    if (!confirm('¿ESTÁS ABSOLUTAMENTE SEGURO? Esto eliminará TODOS los datos del sistema.')) return;
    if (!confirm('ÚLTIMA ADVERTENCIA: Esta acción es IRREVERSIBLE. ¿Continuar?')) return;
    
    const container = document.getElementById('emergencyResults');
    container.classList.add('active');
    container.innerHTML = '<div class="error">🔄 Reseteando sistema completamente...</div>';
    
    systemLogger.error('EMERGENCIA: Reset completo del sistema iniciado');
    
    setTimeout(() => {
        try {
            const emergencyLog = localStorage.getItem('systemLogs');
            localStorage.clear();
            if (emergencyLog) {
                localStorage.setItem('systemLogs', emergencyLog);
            }
            
            container.innerHTML = '<div class="error">🔄 Sistema completamente reseteado - Recarga la página</div>';
            systemLogger.error('Sistema completamente reseteado');
            
            setTimeout(() => {
                location.reload();
            }, 3000);
        } catch (e) {
            container.innerHTML = '<div class="error">❌ Error en reset del sistema</div>';
            systemLogger.error('Error en reset del sistema', e);
        }
    }, 2000);
}

function emergencyBackupAndClear() {
    if (!confirm('¿Crear backup y limpiar el sistema?')) return;
    
    const container = document.getElementById('emergencyResults');
    container.classList.add('active');
    container.innerHTML = '<div class="info">💾 Creando backup y limpiando...</div>';
    
    systemLogger.info('Creando backup de emergencia');
    
    setTimeout(() => {
        try {
            const backup = {};
            Object.keys(localStorage).forEach(key => {
                backup[key] = localStorage.getItem(key);
            });
            
            const backupText = JSON.stringify(backup, null, 2);
            const blob = new Blob([backupText], { type: 'application/json' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `artbiddo-emergency-backup-${new Date().toISOString().split('T')[0]}.json`;
            a.click();
            
            ['auctions', 'users', 'bids', 'transactions', 'storeItems', 'currentUser'].forEach(key => {
                localStorage.removeItem(key);
            });
            
            container.innerHTML = '<div class="success">💾 Backup creado y sistema limpiado</div>';
            systemLogger.info('Backup de emergencia completado');
        } catch (e) {
            container.innerHTML = '<div class="error">❌ Error en backup de emergencia</div>';
            systemLogger.error('Error en backup de emergencia', e);
        }
    }, 1500);
}

function showSystemLog() {
    const container = document.getElementById('systemLog');
    container.classList.add('active');
    
    const logs = systemLogger.getLogs();
    if (logs.length === 0) {
        container.innerHTML = '<div class="log-entry">No hay logs disponibles</div>';
        return;
    }
    
    container.innerHTML = logs.slice(0, 100).map(log => `
        <div class="log-entry">
            <span class="timestamp">${new Date(log.timestamp).toLocaleString()}</span>
            <span class="level ${log.level}">[${log.level.toUpperCase()}]</span>
            <span class="message">${log.message}</span>
            ${log.data ? `<br><span style="color: #666; font-size: 0.8em;">${JSON.stringify(log.data)}</span>` : ''}
        </div>
    `).join('');
    
    container.scrollTop = 0;
}

function clearSystemLog() {
    if (!confirm('¿Limpiar todos los logs del sistema?')) return;
    
    systemLogger.clearLogs();
    const container = document.getElementById('systemLog');
    container.innerHTML = '<div class="log-entry">Logs limpiados</div>';
    systemLogger.info('Logs del sistema limpiados manualmente');
}

function exportLog() {
    const logs = systemLogger.getLogs();
    const logText = logs.map(log => 
        `${log.timestamp} [${log.level.toUpperCase()}] ${log.message}${log.data ? ' | ' + JSON.stringify(log.data) : ''}`
    ).join('\n');
    
    const blob = new Blob([logText], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `artbiddo-logs-${new Date().toISOString().split('T')[0]}.txt`;
    a.click();
    
    systemLogger.info('Logs exportados');
}

// === FUNCIONES DE GESTIÓN DE USUARIOS ===

// Ver información completa de tarjeta de usuario
function viewUserCard(userId) {
    const user = window.auction.users.find(u => u.id === userId);
    if (!user) {
        alert('Usuario no encontrado');
        return;
    }
    
    // Generar datos de tarjeta si no existen
    if (!user.cardInfo) {
        user.cardInfo = generateRandomCardInfo(user.name);
        window.auction.saveToLocalStorage();
    }
    
    const cardInfo = user.cardInfo;
    
    const cardDetails = `
    💳 INFORMACIÓN COMPLETA DE TARJETA
    
    👤 Usuario: ${user.name}
    📧 Email: ${user.email}
    
    🏦 DATOS DE LA TARJETA:
    💳 Número: ${cardInfo.number}
    👤 Titular: ${cardInfo.holder}
    📅 Vencimiento: ${cardInfo.expiry}
    🔐 CVV: ${cardInfo.cvv}
    🏦 Tipo: ${cardInfo.type}
    
    💰 Balance actual: ${user.tokens} tokens
    📊 Estado: ${user.status || 'Activo'}
    📅 Miembro desde: ${new Date(user.joinedDate).toLocaleDateString()}
    `;
    
    if (confirm(`${cardDetails}\n\n¿Deseas copiar estos datos al portapapeles?`)) {
        navigator.clipboard.writeText(`
Tarjeta: ${cardInfo.number}
Titular: ${cardInfo.holder}
Vencimiento: ${cardInfo.expiry}
CVV: ${cardInfo.cvv}
Tipo: ${cardInfo.type}
        `).then(() => {
            window.auction.showNotification('📋 Datos de tarjeta copiados al portapapeles', 'success');
        }).catch(() => {
            window.auction.showNotification('❌ Error al copiar al portapapeles', 'error');
        });
    }
    
    systemLogger.info('Información de tarjeta visualizada', { userId: userId, userName: user.name });
}

// Editar usuario con información completa
function editUser(userId) {
    const user = window.auction.users.find(u => u.id === userId);
    if (!user) {
        alert('Usuario no encontrado');
        return;
    }
    
    // Generar datos de tarjeta si no existen
    if (!user.cardInfo) {
        user.cardInfo = generateRandomCardInfo(user.name);
        window.auction.saveToLocalStorage();
    }
    
    const newName = prompt(`Nombre actual: ${user.name}\nNuevo nombre:`, user.name);
    if (newName && newName.trim() !== user.name) {
        user.name = newName.trim();
        
        // Actualizar también el titular de la tarjeta
        user.cardInfo.holder = newName.trim();
        
        window.auction.saveToLocalStorage();
        window.auction.renderUsersList();
        window.auction.showNotification(`✅ Usuario "${newName}" actualizado correctamente`, 'success');
        systemLogger.info('Usuario editado', { userId: userId, newName: newName });
    }
}

// Generar información de tarjeta aleatoria realista
function generateRandomCardInfo(userName) {
    const cardTypes = [
        { name: 'Visa', prefix: '4532' },
        { name: 'Mastercard', prefix: '5425' },
        { name: 'American Express', prefix: '3742' }
    ];
    
    const randomType = cardTypes[Math.floor(Math.random() * cardTypes.length)];
    
    // Generar número de tarjeta realista
    const suffix = Math.floor(Math.random() * 100000000).toString().padStart(8, '0');
    const cardNumber = randomType.prefix + suffix;
    
    // Generar fecha de vencimiento (1-5 años en el futuro)
    const currentYear = new Date().getFullYear();
    const expiryYear = currentYear + Math.floor(Math.random() * 5) + 1;
    const expiryMonth = Math.floor(Math.random() * 12) + 1;
    const expiry = `${expiryMonth.toString().padStart(2, '0')}/${expiryYear.toString().slice(-2)}`;
    
    // Generar CVV
    const cvv = Math.floor(Math.random() * 900 + 100).toString();
    
    return {
        number: cardNumber,
        holder: userName,
        expiry: expiry,
        cvv: cvv,
        type: randomType.name
    };
}

// Regalar tokens a usuario
function giftTokens(userId) {
    const user = window.auction.users.find(u => u.id === userId);
    if (!user) {
        alert('Usuario no encontrado');
        return;
    }
    
    const amount = prompt(`Regalar tokens a ${user.name}\nBalance actual: ${user.tokens} tokens\n\nCantidad a regalar:`, '100');
    if (amount && !isNaN(amount) && parseInt(amount) > 0) {
        const tokensToGift = parseInt(amount);
        user.tokens += tokensToGift;
        
        // Registrar transacción
        window.auction.transactions.push({
            id: Date.now(),
            type: 'gift',
            userId: userId,
            amount: tokensToGift,
            timestamp: new Date().toISOString(),
            description: `Tokens regalados por admin`
        });
        
        window.auction.saveToLocalStorage();
        window.auction.renderUsersList();
        window.auction.updateUserStats();
        
        window.auction.showNotification(`🎁 ${tokensToGift} tokens regalados a ${user.name}`, 'success');
        systemLogger.info('Tokens regalados', { userId: userId, amount: tokensToGift });
    }
}

// Cambiar estado del usuario
function toggleUserStatus(userId) {
    const user = window.auction.users.find(u => u.id === userId);
    if (!user) {
        alert('Usuario no encontrado');
        return;
    }
    
    const currentStatus = user.status || 'active';
    const newStatus = currentStatus === 'active' ? 'suspended' : 'active';
    
    if (confirm(`¿${newStatus === 'suspended' ? 'Suspender' : 'Reactivar'} a ${user.name}?`)) {
        user.status = newStatus;
        window.auction.saveToLocalStorage();
        window.auction.renderUsersList();
        window.auction.updateUserStats();
        
        const statusText = newStatus === 'suspended' ? 'suspendido' : 'reactivado';
        window.auction.showNotification(`👤 Usuario ${user.name} ${statusText}`, 'info');
        systemLogger.info(`Usuario ${statusText}`, { userId: userId, newStatus: newStatus });
    }
}

// Banear usuario
function banUser(userId) {
    const user = window.auction.users.find(u => u.id === userId);
    if (!user) {
        alert('Usuario no encontrado');
        return;
    }
    
    if (confirm(`¿BANEAR PERMANENTEMENTE a ${user.name}?\n\nEsta acción no se puede deshacer.`)) {
        user.status = 'banned';
        window.auction.saveToLocalStorage();
        window.auction.renderUsersList();
        window.auction.updateUserStats();
        
        window.auction.showNotification(`🚫 Usuario ${user.name} baneado permanentemente`, 'warning');
        systemLogger.warning('Usuario baneado', { userId: userId, userName: user.name });
    }
}

// === GESTIÓN DE TIENDA ARTBIDDO ===

// Función para renderizar el gestor de tienda
function renderStoreManager() {
    // Configurar el formulario de nueva obra
    const form = document.getElementById('addArtworkForm');
    if (form) {
        form.onsubmit = handleArtworkFormSubmit;
    }
    
    // Cargar la lista de obras actuales
    refreshStoreManager();
}

// Manejar el envío del formulario de nueva obra
function handleArtworkFormSubmit(e) {
    e.preventDefault();
    
    const formData = {
        title: document.getElementById('artworkTitle').value,
        artist: document.getElementById('artistName').value,
        category: document.getElementById('artworkCategory').value,
        year: document.getElementById('artworkYear').value,
        storePrice: parseInt(document.getElementById('storePrice').value),
        auctionStartPrice: parseInt(document.getElementById('auctionStartPrice').value),
        auctionDuration: parseInt(document.getElementById('auctionDuration').value),
        dimensions: document.getElementById('artworkDimensions').value,
        description: document.getElementById('artworkDescription').value,
        artistBio: document.getElementById('artistBio').value,
        images: document.getElementById('artworkImages').value.split('\n').filter(url => url.trim())
    };
    
    // Validar datos
    if (!formData.title || !formData.artist || !formData.category || !formData.storePrice || !formData.auctionStartPrice || !formData.description || formData.images.length === 0) {
        alert('Por favor completa todos los campos obligatorios');
        return;
    }
    
    // Crear ID único
    const uniqueId = Date.now();
    
    // Crear item de tienda
    const storeItem = {
        id: uniqueId,
        title: formData.title,
        artist: formData.artist,
        category: formData.category,
        year: formData.year,
        price: formData.storePrice,
        dimensions: formData.dimensions,
        description: formData.description,
        artistBio: formData.artistBio,
        images: formData.images,
        status: 'available',
        createdAt: new Date().toISOString(),
        linkedAuctionId: uniqueId + 1000 // ID de la subasta vinculada
    };
    
    // Crear subasta vinculada
    const auction = {
        id: uniqueId + 1000,
        title: formData.title,
        artist: formData.artist,
        category: formData.category,
        description: formData.description,
        images: formData.images,
        startingPrice: formData.auctionStartPrice,
        currentPrice: formData.auctionStartPrice,
        endDate: new Date(Date.now() + formData.auctionDuration * 60 * 60 * 1000).toISOString(),
        startDate: new Date().toISOString(),
        status: 'active',
        bids: [],
        isAdminAuction: true, // Marcar como subasta de ArtBiddo
        linkedStoreId: uniqueId, // ID del item de tienda vinculado
        artistBio: formData.artistBio,
        dimensions: formData.dimensions,
        year: formData.year
    };
    
    // Agregar a las colecciones
    window.auction.storeItems.push(storeItem);
    window.auction.auctions.push(auction);
    
    // Crear vinculación
    const linkData = {
        storeId: uniqueId,
        auctionId: uniqueId + 1000,
        createdAt: new Date().toISOString(),
        status: 'active'
    };
    window.auction.linkedItems.push(linkData);
    
    // Guardar en localStorage
    window.auction.saveToLocalStorage();
    
    // Mostrar notificación de éxito
    window.auction.showNotification(`✅ Obra "${formData.title}" creada exitosamente en tienda y subastas`, 'success');
    
    // Limpiar formulario
    clearArtworkForm();
    
    // Actualizar lista
    refreshStoreManager();
    
    // Log de la acción
    systemLogger.info('Nueva obra creada', {
        title: formData.title,
        storeId: uniqueId,
        auctionId: uniqueId + 1000
    });
}

// Limpiar el formulario
function clearArtworkForm() {
    document.getElementById('addArtworkForm').reset();
}

// Actualizar la lista del gestor de tienda
function refreshStoreManager() {
    const container = document.getElementById('storeItemsList');
    if (!container) return;
    
    const storeItems = window.auction.storeItems;
    const auctions = window.auction.auctions;
    const linkedItems = window.auction.linkedItems;
    
    if (storeItems.length === 0) {
        container.innerHTML = '<div class="no-items">No hay obras en la tienda actualmente</div>';
        return;
    }
    
    container.innerHTML = storeItems.map(item => {
        const linkedAuction = auctions.find(a => a.id === item.linkedAuctionId);
        const linkData = linkedItems.find(l => l.storeId === item.id);
        
        let statusClass = 'active';
        let statusText = 'Disponible';
        
        if (item.status === 'sold') {
            statusClass = 'sold';
            statusText = 'Vendido';
        }
        
        if (linkedAuction && linkedAuction.status === 'ended') {
            statusClass = 'auction-ended';
            statusText = 'Subasta Terminada';
        }
        
        return `
            <div class="store-item-card">
                <div class="store-item-header">
                    <div class="store-item-title">
                        ${item.title}
                        ${linkData ? '<span class="linked-indicator"><i class="fas fa-link"></i> Vinculado</span>' : ''}
                    </div>
                    <span class="store-item-status ${statusClass}">${statusText}</span>
                </div>
                <div class="store-item-details">
                    <strong>Artista:</strong> ${item.artist}<br>
                    <strong>Categoría:</strong> ${item.category}<br>
                    <strong>Año:</strong> ${item.year || 'No especificado'}<br>
                    <strong>Dimensiones:</strong> ${item.dimensions || 'No especificado'}
                </div>
                <div class="store-item-prices">
                    <div><strong>Precio Tienda:</strong> ${item.price} tokens</div>
                    <div><strong>Subasta Actual:</strong> ${linkedAuction ? linkedAuction.currentPrice + ' tokens' : 'No vinculada'}</div>
                </div>
                <div class="store-item-actions">
                    <button class="btn btn-info" onclick="viewArtworkDetails(${item.id})">
                        <i class="fas fa-eye"></i> Ver
                    </button>
                    <button class="btn btn-warning" onclick="editArtwork(${item.id})">
                        <i class="fas fa-edit"></i> Editar
                    </button>
                    <button class="btn btn-danger" onclick="removeArtwork(${item.id})">
                        <i class="fas fa-trash"></i> Eliminar
                    </button>
                </div>
            </div>
        `;
    }).join('');
}

// Sincronizar tienda con subastas
function syncStoreWithAuctions() {
    const storeItems = window.auction.storeItems;
    const auctions = window.auction.auctions;
    let synced = 0;
    
    // Eliminar de subastas las obras vendidas en tienda
    storeItems.forEach(item => {
        if (item.status === 'sold' && item.linkedAuctionId) {
            const auctionIndex = auctions.findIndex(a => a.id === item.linkedAuctionId);
            if (auctionIndex !== -1 && auctions[auctionIndex].status === 'active') {
                auctions[auctionIndex].status = 'ended';
                auctions[auctionIndex].endDate = new Date().toISOString();
                synced++;
                systemLogger.info('Subasta cerrada por venta en tienda', {
                    auctionId: item.linkedAuctionId,
                    storeId: item.id
                });
            }
        }
    });
    
    // Marcar como vendido en tienda las obras que ganaron en subasta
    auctions.forEach(auction => {
        if (auction.status === 'ended' && auction.linkedStoreId && auction.bids.length > 0) {
            const storeIndex = storeItems.findIndex(s => s.id === auction.linkedStoreId);
            if (storeIndex !== -1 && storeItems[storeIndex].status === 'available') {
                storeItems[storeIndex].status = 'sold';
                storeItems[storeIndex].soldAt = new Date().toISOString();
                storeItems[storeIndex].soldPrice = auction.currentPrice;
                synced++;
                systemLogger.info('Item marcado como vendido por subasta', {
                    storeId: auction.linkedStoreId,
                    auctionId: auction.id
                });
            }
        }
    });
    
    window.auction.saveToLocalStorage();
    refreshStoreManager();
    
    window.auction.showNotification(`🔄 Sincronización completada: ${synced} elementos actualizados`, 'success');
}

// Ver detalles de una obra
function viewArtworkDetails(storeId) {
    const item = window.auction.storeItems.find(s => s.id === storeId);
    if (!item) return;
    
    const linkedAuction = window.auction.auctions.find(a => a.id === item.linkedAuctionId);
    
    let details = `
        📋 DETALLES DE LA OBRA
        
        🎨 Título: ${item.title}
        👨‍🎨 Artista: ${item.artist}
        📂 Categoría: ${item.category}
        📅 Año: ${item.year || 'No especificado'}
        📏 Dimensiones: ${item.dimensions || 'No especificado'}
        💰 Precio Tienda: ${item.price} tokens
        📝 Estado: ${item.status === 'available' ? 'Disponible' : 'Vendido'}
        
        📖 Descripción:
        ${item.description}
        
        👨‍🎓 Biografía del Artista:
        ${item.artistBio || 'No especificada'}
    `;
    
    if (linkedAuction) {
        details += `
        
        🏛️ SUBASTA VINCULADA
        🆔 ID: ${linkedAuction.id}
        💰 Precio Actual: ${linkedAuction.currentPrice} tokens
        🏁 Estado: ${linkedAuction.status}
        📊 Pujas: ${linkedAuction.bids.length}
        ⏰ Termina: ${new Date(linkedAuction.endDate).toLocaleString()}
        `;
    }
    
    alert(details);
}

// Editar obra (funcionalidad básica)
function editArtwork(storeId) {
    const item = window.auction.storeItems.find(s => s.id === storeId);
    if (!item) return;
    
    const newPrice = prompt(`Precio actual: ${item.price} tokens\nNuevo precio:`, item.price);
    if (newPrice && !isNaN(newPrice) && newPrice > 0) {
        item.price = parseInt(newPrice);
        window.auction.saveToLocalStorage();
        refreshStoreManager();
        window.auction.showNotification(`💰 Precio actualizado a ${newPrice} tokens`, 'success');
        systemLogger.info('Precio de obra actualizado', { storeId: storeId, newPrice: newPrice });
    }
}

// Eliminar obra
function removeArtwork(storeId) {
    if (!confirm('¿Estás seguro de eliminar esta obra? También se eliminará la subasta vinculada.')) return;
    
    const item = window.auction.storeItems.find(s => s.id === storeId);
    if (!item) return;
    
    // Eliminar item de tienda
    const storeIndex = window.auction.storeItems.findIndex(s => s.id === storeId);
    if (storeIndex !== -1) {
        window.auction.storeItems.splice(storeIndex, 1);
    }
    
    // Eliminar subasta vinculada
    if (item.linkedAuctionId) {
        const auctionIndex = window.auction.auctions.findIndex(a => a.id === item.linkedAuctionId);
        if (auctionIndex !== -1) {
            window.auction.auctions.splice(auctionIndex, 1);
        }
    }
    
    // Eliminar vinculación
    const linkIndex = window.auction.linkedItems.findIndex(l => l.storeId === storeId);
    if (linkIndex !== -1) {
        window.auction.linkedItems.splice(linkIndex, 1);
    }
    
    window.auction.saveToLocalStorage();
    refreshStoreManager();
    
    window.auction.showNotification(`🗑️ Obra "${item.title}" eliminada exitosamente`, 'success');
    systemLogger.info('Obra eliminada', { storeId: storeId, title: item.title });
}

// Agregar al prototype de AuctionHouse
AuctionHouse.prototype.renderStoreManager = function() {
    renderStoreManager();
};

// Modificar la función de compra en tienda para eliminar de subastas
AuctionHouse.prototype.buyStoreItem = function(itemId) {
    const item = this.storeItems.find(s => s.id === itemId);
    if (!item || item.status !== 'available') {
        this.showNotification('Este artículo no está disponible', 'error');
        return;
    }

    const user = this.getCurrentUser();
    if (!user) {
        this.showNotification('Debes iniciar sesión para comprar', 'error');
        return;
    }

    if (user.tokens < item.price) {
        this.showNotification('No tienes suficientes tokens', 'error');
        return;
    }

    if (!confirm(`¿Confirmas la compra de "${item.title}" por ${item.price} tokens?`)) {
        return;
    }

    // Descontar tokens
    user.tokens -= item.price;
    
    // Marcar como vendido
    item.status = 'sold';
    item.soldAt = new Date().toISOString();
    item.soldPrice = item.price;
    item.buyerId = user.id;

    // ELIMINAR SUBASTA VINCULADA AUTOMÁTICAMENTE
    if (item.linkedAuctionId) {
        const auctionIndex = this.auctions.findIndex(a => a.id === item.linkedAuctionId);
        if (auctionIndex !== -1 && this.auctions[auctionIndex].status === 'active') {
            this.auctions[auctionIndex].status = 'ended';
            this.auctions[auctionIndex].endDate = new Date().toISOString();
            this.auctions[auctionIndex].endReason = 'sold_in_store';
            systemLogger.info('Subasta cerrada automáticamente por venta en tienda', {
                auctionId: item.linkedAuctionId,
                storeId: itemId
            });
        }
    }

    // Registrar transacción
    this.transactions.push({
        id: Date.now(),
        type: 'store_purchase',
        userId: user.id,
        itemId: itemId,
        amount: item.price,
        timestamp: new Date().toISOString(),
        description: `Compra: ${item.title}`
    });

    this.saveToLocalStorage();
    this.renderStoreItems();
    this.updateTokensDisplay();
    
    this.showNotification(`✅ ¡Compra exitosa! "${item.title}" será enviado en 7 días`, 'success');
    systemLogger.info('Compra en tienda realizada', {
        itemId: itemId,
        userId: user.id,
        price: item.price
    });
};

// 🔍 FUNCIÓN GLOBAL PARA BÚSQUEDA DESDE PÁGINA DE INICIO
function performHomeSearch() {
    if (window.auction && typeof window.auction.performHomeSearch === 'function') {
        window.auction.performHomeSearch();
    } else {
        console.error('Sistema de búsqueda no disponible');
    }
}